{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"","text":"<p>  Introduction  <p>E2Slib is a collection of a methods, classes and enums used in other E2S's projects. It also gathers a set of classes to compare scenarios using a list of KPIs.</p>"},{"location":"reference/analysis/","title":"Index","text":""},{"location":"reference/analysis/comparison/","title":"Comparison","text":""},{"location":"reference/analysis/comparison/#analysis.comparison.ScenarioComparison","title":"<code>ScenarioComparison</code>  <code>dataclass</code>","text":"<p>A class used to compare different scenarios.</p> <p>Attributes:</p> Name Type Description <code>reference_scenario</code> <code>Scenario</code> <p>The reference scenario to compare with.</p> <code>list_scenarios</code> <code>list[Scenario]</code> <p>The list of scenarios to compare.</p> <code>_summary_results</code> <code>DataFrame</code> <p>The summary results of the comparison (default is an empty DataFrame).</p> <p>Methods:</p> Name Description <code>summary_results</code> <p>Get the summary results of the comparison.</p> <code>comparison_results</code> <p>Get the comparison results of the scenarios with the reference scenario.</p> Source code in <code>e2slib/analysis/comparison.py</code> <pre><code>@dataclass\nclass ScenarioComparison:\n  \"\"\"\n  A class used to compare different scenarios.\n\n  Attributes:\n      reference_scenario (scenario.Scenario): The reference scenario to compare with.\n      list_scenarios (list[scenario.Scenario]): The list of scenarios to compare.\n      _summary_results (pd.DataFrame): The summary results of the comparison (default is an empty DataFrame).\n\n  Methods:\n      summary_results: Get the summary results of the comparison.\n      comparison_results: Get the comparison results of the scenarios with the reference scenario.\n  \"\"\"\n\n  reference_scenario: scenario.Scenario\n  list_scenarios: list[scenario.Scenario]\n  _summary_results: pd.DataFrame = field(default_factory=pd.DataFrame)\n\n  @property\n  def summary_results(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the summary results of the comparison.\n\n    Returns:\n        pd.DataFrame: The summary results of the comparison.\n    \"\"\"\n    frames: list[pd.DataFrame] = []\n    for sc in self.list_scenarios:\n      frames.append(sc.get_summary_results())\n    self._summary_results = pd.concat(frames, axis=1)\n    sorted_cols: list[str] = sorted(self._summary_results.columns)\n    self._summary_results = self._summary_results[sorted_cols]\n    return self._summary_results\n\n  def comparison_results(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the comparison results of the scenarios with the reference scenario.\n\n    Returns:\n        pd.DataFrame: The comparison results of the scenarios with the reference scenario.\n    \"\"\"\n    ref_summary = self.reference_scenario.get_summary_results()\n    return (self.summary_results - ref_summary.values) / ref_summary.values\n</code></pre>"},{"location":"reference/analysis/comparison/#analysis.comparison.ScenarioComparison.summary_results","title":"<code>summary_results: pd.DataFrame</code>  <code>property</code>","text":"<p>Get the summary results of the comparison.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The summary results of the comparison.</p>"},{"location":"reference/analysis/comparison/#analysis.comparison.ScenarioComparison.comparison_results","title":"<code>comparison_results()</code>","text":"<p>Get the comparison results of the scenarios with the reference scenario.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The comparison results of the scenarios with the reference scenario.</p> Source code in <code>e2slib/analysis/comparison.py</code> <pre><code>def comparison_results(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Get the comparison results of the scenarios with the reference scenario.\n\n  Returns:\n      pd.DataFrame: The comparison results of the scenarios with the reference scenario.\n  \"\"\"\n  ref_summary = self.reference_scenario.get_summary_results()\n  return (self.summary_results - ref_summary.values) / ref_summary.values\n</code></pre>"},{"location":"reference/analysis/economic_functions/","title":"Economic functions","text":""},{"location":"reference/analysis/economic_functions/#analysis.economic_functions.create_cashflow_data_skeleton","title":"<code>create_cashflow_data_skeleton()</code>","text":"<p>Create a skeleton DataFrame for the cashflow data.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The cashflow data skeleton.</p> Source code in <code>e2slib/analysis/economic_functions.py</code> <pre><code>def create_cashflow_data_skeleton() -&gt; pd.DataFrame:\n  \"\"\"\n  Create a skeleton DataFrame for the cashflow data.\n\n  Returns:\n      pd.DataFrame: The cashflow data skeleton.\n  \"\"\"\n  columns = pd.MultiIndex.from_tuples([], names=['Parameters', 'Units'])\n  cashflow_dataf = pd.DataFrame(index=list(range(0, 50)), columns=columns)\n  cashflow_dataf.index.name = site_schema.ResultsSchema.INDEX\n  return cashflow_dataf\n</code></pre>"},{"location":"reference/analysis/location/","title":"Location","text":""},{"location":"reference/analysis/location/#analysis.location.GeoLocation","title":"<code>GeoLocation</code>  <code>dataclass</code>","text":"<p>A class used to store the geographical location.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the location.</p> <code>latitude</code> <code>float</code> <p>The latitude of the location.</p> <code>longitude</code> <code>float</code> <p>The longitude of the location.</p> <code>altitude</code> <code>float</code> <p>The altitude of the location.</p> <code>timezone</code> <code>str</code> <p>The timezone of the location.</p> Source code in <code>e2slib/analysis/location.py</code> <pre><code>@dataclass\nclass GeoLocation:\n  \"\"\"\n  A class used to store the geographical location.\n\n  Attributes:\n      name (str): The name of the location.\n      latitude (float): The latitude of the location.\n      longitude (float): The longitude of the location.\n      altitude (float): The altitude of the location.\n      timezone (str): The timezone of the location.\n\n  \"\"\"\n  name: str\n  latitude: float\n  longitude: float\n  altitude: float\n  timezone: str\n</code></pre>"},{"location":"reference/analysis/scenario/","title":"Scenario","text":""},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario","title":"<code>Scenario</code>  <code>dataclass</code>","text":"<p>A class used to represent a scenario.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the scenario.</p> <code>site_model</code> <code>SiteModel</code> <p>The site model of the scenario.</p> <code>site_energy_demand</code> <code>DataFrame</code> <p>The site energy demand of the scenario (default is an empty DataFrame).</p> <code>description</code> <code>str</code> <p>The description of the scenario (default is an empty string).</p> <code>import_electricity_emission_factor</code> <code>DataFrame</code> <p>The import electricity emission factor of the scenario (default is an empty DataFrame).</p> <code>import_electricity_prices</code> <code>DataFrame</code> <p>The import electricity prices of the scenario (default is an empty DataFrame).</p> <code>export_electricity_prices</code> <code>DataFrame</code> <p>The export electricity prices of the scenario (default is an empty DataFrame).</p> <code>discount_rate</code> <code>float</code> <p>The discount rate of the scenario (default is 0.0).</p> <code>summary_results</code> <code>DataFrame</code> <p>The summary results of the scenario (default is an empty DataFrame).</p> <code>cashflow_data</code> <code>DataFrame</code> <p>The cashflow data of the scenario (default is an empty DataFrame).</p> <p>Methods:</p> Name Description <code>__post_init__</code> <p>Initialize the scenario.</p> <code>add_asset_aggregator</code> <p>Add an asset aggregator to the site model of the scenario.</p> <code>update_results</code> <p>Update the site energy demand and the summary results of the scenario.</p> <code>set_default_export_electricity_prices</code> <p>Set a default value if no export electricity prices are provided.</p> <code>set_default_import_electricity_emission_factor</code> <p>Set a default import electricity emission factor.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>@dataclass\nclass Scenario:\n  \"\"\"\n  A class used to represent a scenario.\n\n  Attributes:\n      name (str): The name of the scenario.\n      site_model (protocols.SiteModel): The site model of the scenario.\n      site_energy_demand (pd.DataFrame): The site energy demand of the scenario (default is an empty DataFrame).\n      description (str): The description of the scenario (default is an empty string).\n      import_electricity_emission_factor (pd.DataFrame): The import electricity emission factor of the scenario (default is an empty DataFrame).\n      import_electricity_prices (pd.DataFrame): The import electricity prices of the scenario (default is an empty DataFrame).\n      export_electricity_prices (pd.DataFrame): The export electricity prices of the scenario (default is an empty DataFrame).\n      discount_rate (float): The discount rate of the scenario (default is 0.0).\n      summary_results (pd.DataFrame): The summary results of the scenario (default is an empty DataFrame).\n      cashflow_data (pd.DataFrame): The cashflow data of the scenario (default is an empty DataFrame).\n\n  Methods:\n      __post_init__(): Initialize the scenario.\n      add_asset_aggregator(asset): Add an asset aggregator to the site model of the scenario.\n      update_results(): Update the site energy demand and the summary results of the scenario.\n      set_default_export_electricity_prices(value): Set a default value if no export electricity prices are provided.\n      set_default_import_electricity_emission_factor(): Set a default import electricity emission factor.\n  \"\"\"\n  name: str\n  site_model: protocols.SiteModel\n  site_energy_demand: pd.DataFrame = field(\n      default_factory=pd.DataFrame)  #See site_schema.SiteDataSchema for format\n  description: str = ''\n  import_electricity_emission_factor: pd.DataFrame = field(\n      default_factory=pd.DataFrame)  #kgCO2e/kWh\n  import_electricity_prices: pd.DataFrame = field(default_factory=pd.DataFrame)\n  export_electricity_prices: pd.DataFrame = field(default_factory=pd.DataFrame)\n  discount_rate: float = 0.  #for investment\n  summary_results: pd.DataFrame = field(default_factory=pd.DataFrame)\n  cashflow_data: pd.DataFrame = field(default_factory=pd.DataFrame)\n\n  def __post_init__(self) -&gt; None:\n    self.format_site_import_electricity_prices()\n    self.set_default_import_electricity_emission_factor()\n    self.set_default_export_electricity_prices()\n    self.update_results()\n\n  def add_asset_aggregator(self, asset: protocols.AssetAggregator) -&gt; None:\n    \"\"\"Add an asset aggregator to the scenario.\"\"\"\n    self.site_model.add_asset_aggregator(asset)\n\n  def update_results(self) -&gt; None:\n    \"\"\"Update the results of the scenario.\"\"\"\n    self.site_energy_demand = self.site_model.export_results()\n    self.summary_results = self.export_results()\n\n  def set_default_export_electricity_prices(self, value: float = 0):\n    \"\"\"\n    Set a default value if no export electricity prices are provided.\n\n    If the export electricity prices DataFrame is empty, this method will copy the import electricity prices DataFrame,\n    rename its columns to 'EXPORT_ELECTRICITY_REVENUES', and set all its values to the provided default value.\n\n    Args:\n        value (float, optional): The default value to set for export electricity prices. Defaults to 0.\n    \"\"\"\n    if len(self.export_electricity_prices) == 0:\n      self.export_electricity_prices = self.import_electricity_prices.copy()\n      self.export_electricity_prices.columns = common.get_multiindex_single_column(\n          site_schema.ResultsSchema.EXPORT_ELECTRICITY_REVENUES)\n      self.export_electricity_prices.iloc[:, 0] = value\n\n  def set_default_import_electricity_emission_factor(self,\n                                                     value: float = 0.150):\n    \"\"\"\n    Set a default value if no import electricity emission factor is provided.\n\n    If the import electricity emission factor DataFrame is empty, this method will copy the import electricity prices DataFrame,\n    rename its columns to 'GHG_INTENSITY_IMPORT_ELECTRICITY', and set all its values to the provided default value.\n\n    Args:\n        value (float, optional): The default value to set for import electricity emission factor. Defaults to 0.150.\n    \"\"\"\n    if len(self.import_electricity_emission_factor) == 0:\n      self.import_electricity_emission_factor = self.import_electricity_prices.copy(\n      )\n      self.import_electricity_emission_factor.columns = common.get_multiindex_single_column(\n          site_schema.ResultsSchema.GHG_INTENSITY_IMPORT_ELECTRICITY)\n      self.import_electricity_emission_factor.iloc[:, 0] = value\n\n  @property\n  def export_demand(self) -&gt; pd.DataFrame:\n    col_name = site_schema.SiteDataSchema.EXPORT_ELECTRICITY_DEMAND\n    return self.site_energy_demand[col_name].to_frame().copy()\n\n  @property\n  def import_demand(self) -&gt; pd.DataFrame:\n    col_name = site_schema.SiteDataSchema.IMPORT_ELECTRICITY_DEMAND\n    return self.site_energy_demand[col_name].to_frame().copy()\n\n  @property\n  def avoided_import(self) -&gt; pd.DataFrame:\n    col_name = site_schema.SiteDataSchema.SELF_CONSUMED_ELECTRICITY\n    return self.site_energy_demand[col_name].to_frame().copy()\n\n  @property\n  def onsite_generation(self) -&gt; pd.DataFrame:\n    col_name = site_schema.SiteDataSchema.ELECTRICITY_GENERATION\n    return self.site_energy_demand[col_name].to_frame().copy()\n\n  @property\n  def timezone(self) -&gt; str:\n    return self.site_model.timezone\n\n  def get_col_name(self, col: tuple[str, ...]) -&gt; tuple[str, ...]:\n    return common.get_multiindex_single_column(col)[0]\n\n  def format_site_import_electricity_prices(self) -&gt; None:\n    \"\"\"\n    Format the import electricity prices DataFrame.\n    \"\"\"\n    if self.import_electricity_prices.shape[1] == 1:\n      price_datetimeindex: pd.DatetimeIndex = self.import_electricity_prices.index\n      if price_datetimeindex.tzinfo is None:\n        self.import_electricity_prices.index = price_datetimeindex.tz_localize(\n            self.timezone)\n      else:\n        self.import_electricity_prices.index = price_datetimeindex.tz_convert(\n            self.timezone)\n      self.import_electricity_prices.index.name = site_schema.ResultsSchema.INDEX\n      self.import_electricity_prices.columns = common.get_multiindex_single_column(\n          site_schema.ResultsSchema.IMPORT_ELECTRICITY_PRICES)\n    else:\n      print(\n          'The import_electricity_prices dataframe has too many columns or was not provided. Some functions of this class may not work.'\n      )\n\n  def calculate_electricity_import_operation_cost(self) -&gt; pd.DataFrame:\n    \"\"\"Calculate the electricity import operation cost based on a dataframe\n    where first column is import electricity and second column export electricity\n\n    Returns:\n      pd.DataFrame: A DataFrame with the electricity import operation cost.\"\"\"\n    dataf = self.import_demand.mul(self.import_electricity_prices.values,\n                                   axis=0)\n    dataf.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.IMPORT_ELECTRICITY_COSTS)\n    return dataf\n\n  def calculate_electricity_export_operation_cost(self) -&gt; pd.DataFrame:\n    \"\"\"Calculate the electricity export operation cost based on a dataframe\n    where first column is import electricity and second column export electricity.\n\n    Returns:\n      pd.DataFrame: A DataFrame with the electricity export operation cost.\"\"\"\n    dataf = self.export_demand.mul(self.export_electricity_prices.values,\n                                   axis=0)\n    dataf.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.EXPORT_ELECTRICITY_REVENUES)\n    return dataf\n\n  def calculate_electricity_associated_emissions(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Calculate the electricity associated emissions from the site.\n\n    This method calculates the emissions by multiplying the import electricity emissions by the import electricity emission factor.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the electricity associated emissions.\n    \"\"\"\n    dataf = self.import_demand.mul(\n        self.import_electricity_emission_factor.values, axis=0)\n    dataf.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.GHG_EMISSIONS_IMPORT_ELECTRICITY)\n    return dataf\n\n  def calculate_site_electricity_avoided_emissions(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Calculate the site avoided emissions from self-consuming electricity from PV system.\n\n    This method calculates the avoided emissions by multiplying the avoided import emissions by the import electricity emission factor.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the site avoided emissions.    \n\n    \"\"\"\n    dataf = self.avoided_import.mul(\n        self.import_electricity_emission_factor.values, axis=0)\n    dataf.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.SITE_GHG_EMISSIONS_DISPLACED)\n    return dataf\n\n  def calculate_total_electricity_avoided_emissions(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Calculate the total avoided emissions from the site.\n\n    This method calculates the total avoided emissions by summing the avoided import emissions and the onsite generation emissions.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the total avoided emissions.\n    \"\"\"\n    dataf = self.onsite_generation.mul(\n        self.import_electricity_emission_factor.values, axis=0)\n    dataf.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.TOTAL_GHG_EMISSIONS_DISPLACED)\n    return dataf\n\n  def calculate_electricity_operation_cost(self):\n    \"\"\"\n    Calculate the electricity operation cost based on a dataframe\n    where first column is import electricity and second column export electricity.\n\n    This method calculates the import and export electricity operation costs and concatenates them into a single DataFrame.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the electricity import and export operation costs.\n    \"\"\"\n    import_cost = self.calculate_electricity_import_operation_cost()\n    export_cost = self.calculate_electricity_export_operation_cost()\n    return pd.concat([import_cost, export_cost], axis=1)\n\n  def calculate_electricity_import_savings(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Calculate the electricity import savings from self-consuming electricity from PV system.\n\n    This method calculates the savings by multiplying the avoided import electricity by the import electricity prices.\n    The result is a DataFrame with a single column named 'ELECTRICITY_SAVINGS'.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the electricity import savings.\n    \"\"\"\n    dataf = self.avoided_import.mul(self.import_electricity_prices.values,\n                                    axis=0)\n    dataf.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.ELECTRICITY_SAVINGS)\n    return dataf\n\n  def export_results(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Export the results of the scenario.\n\n    This method calculates the current cost, current emissions, site avoided emissions, total avoided emissions, and current cost savings. \n    It then concatenates these results along with the site energy demand into a single DataFrame.\n\n    Returns:\n        pd.DataFrame: A DataFrame containing the site energy demand, current cost, current cost savings, current emissions, site avoided emissions, and total avoided emissions.\n    \"\"\"\n    current_cost = self.calculate_electricity_operation_cost()\n    current_emissions = self.calculate_electricity_associated_emissions()\n    site_avoided_emissions = self.calculate_site_electricity_avoided_emissions(\n    )\n    total_avoided_emissions = self.calculate_total_electricity_avoided_emissions(\n    )\n    current_cost_savings = self.calculate_electricity_import_savings()\n    return pd.concat([\n        self.site_energy_demand, current_cost, current_cost_savings,\n        current_emissions, site_avoided_emissions, total_avoided_emissions\n    ],\n                     axis=1)\n\n  def calculate_total_opex(self,\n                           summary_results: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Calculate the total operational expenditure (OPEX) for the scenario.\n\n    Args:\n        summary_results (pd.DataFrame): The summary results of the scenario.\n\n    Returns:\n        pd.DataFrame: The updated summary results with the total OPEX.\n    \"\"\"\n    opex_col = self.get_col_name(site_schema.ResultsSchema.OPEX)\n    summary_results.loc[opex_col, self.name] = sum(\n        self.site_model.annual_maintenance_cost.values())\n\n    import_costs = self.get_col_name(\n        site_schema.ResultsSchema.IMPORT_ELECTRICITY_COSTS)\n    export_revenues = self.get_col_name(\n        site_schema.ResultsSchema.EXPORT_ELECTRICITY_REVENUES)\n    summary_results.loc[opex_col, self.name] = summary_results.loc[\n        opex_col, self.name] + summary_results.loc[\n            import_costs, self.name] - summary_results.loc[export_revenues,\n                                                           self.name]\n    return summary_results\n\n  def get_capex_by_technology(self,\n                              summary_results: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the capital expenditure (CAPEX) by technology for the scenario.\n\n    Args:\n        summary_results (pd.DataFrame): The summary results of the scenario.\n\n    Returns:\n        pd.DataFrame: The updated summary results with the CAPEX by technology.\n    \"\"\"\n    for tech_name, tech_capex in self.site_model.capital_cost.items():\n      col_name = site_schema.ResultsSchema.CAPEX\n      col_name = (f'{tech_name.name}_{col_name[0]}', ) + col_name[1:]\n      summary_results.loc[col_name, self.name] = tech_capex\n    return summary_results\n\n  def get_capacity_by_technology(\n      self, summary_results: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the installed capacity by technology for the scenario.\n\n    Args:\n        summary_results (pd.DataFrame): The summary results of the scenario.\n\n    Returns:\n        pd.DataFrame: The updated summary results with the installed capacity by technology.\n    \"\"\"\n    for tech_name, tech_cap in self.site_model.size_system.items():\n      col_name = site_schema.ResultsSchema.CAPACITY_INSTALLED\n      col_name = (f'{tech_name.name}_{col_name[0]}', ) + col_name[1:]\n      summary_results.loc[col_name, self.name] = tech_cap\n    return summary_results\n\n  def get_summary_results(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the summary results for the scenario.\n\n    Returns:\n        pd.DataFrame: The summary results for the scenario.\n    \"\"\"\n    summary_results = self.summary_results.sum().to_frame()\n    summary_results.columns = [self.name]\n    peak_import_col = self.get_col_name(\n        site_schema.ResultsSchema.PEAK_ELECTRICITY_IMPORT)\n    summary_results.loc[peak_import_col,\n                        self.name] = self.import_demand.max().iloc[0] * 2\n    peak_export_col = self.get_col_name(\n        site_schema.ResultsSchema.PEAK_ELECTRICITY_EXPORT)\n    summary_results.loc[peak_export_col,\n                        self.name] = self.export_demand.max().iloc[0] * 2\n\n    summary_results = self.get_capex_by_technology(summary_results)\n    summary_results = self.calculate_total_opex(summary_results)\n    summary_results = self.get_capacity_by_technology(summary_results)\n    return summary_results.astype(float)\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.add_asset_aggregator","title":"<code>add_asset_aggregator(asset)</code>","text":"<p>Add an asset aggregator to the scenario.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def add_asset_aggregator(self, asset: protocols.AssetAggregator) -&gt; None:\n  \"\"\"Add an asset aggregator to the scenario.\"\"\"\n  self.site_model.add_asset_aggregator(asset)\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_electricity_associated_emissions","title":"<code>calculate_electricity_associated_emissions()</code>","text":"<p>Calculate the electricity associated emissions from the site.</p> <p>This method calculates the emissions by multiplying the import electricity emissions by the import electricity emission factor.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame containing the electricity associated emissions.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_electricity_associated_emissions(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Calculate the electricity associated emissions from the site.\n\n  This method calculates the emissions by multiplying the import electricity emissions by the import electricity emission factor.\n\n  Returns:\n      pd.DataFrame: A DataFrame containing the electricity associated emissions.\n  \"\"\"\n  dataf = self.import_demand.mul(\n      self.import_electricity_emission_factor.values, axis=0)\n  dataf.columns = common.get_multiindex_single_column(\n      site_schema.ResultsSchema.GHG_EMISSIONS_IMPORT_ELECTRICITY)\n  return dataf\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_electricity_export_operation_cost","title":"<code>calculate_electricity_export_operation_cost()</code>","text":"<p>Calculate the electricity export operation cost based on a dataframe where first column is import electricity and second column export electricity.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame with the electricity export operation cost.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_electricity_export_operation_cost(self) -&gt; pd.DataFrame:\n  \"\"\"Calculate the electricity export operation cost based on a dataframe\n  where first column is import electricity and second column export electricity.\n\n  Returns:\n    pd.DataFrame: A DataFrame with the electricity export operation cost.\"\"\"\n  dataf = self.export_demand.mul(self.export_electricity_prices.values,\n                                 axis=0)\n  dataf.columns = common.get_multiindex_single_column(\n      site_schema.ResultsSchema.EXPORT_ELECTRICITY_REVENUES)\n  return dataf\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_electricity_import_operation_cost","title":"<code>calculate_electricity_import_operation_cost()</code>","text":"<p>Calculate the electricity import operation cost based on a dataframe where first column is import electricity and second column export electricity</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame with the electricity import operation cost.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_electricity_import_operation_cost(self) -&gt; pd.DataFrame:\n  \"\"\"Calculate the electricity import operation cost based on a dataframe\n  where first column is import electricity and second column export electricity\n\n  Returns:\n    pd.DataFrame: A DataFrame with the electricity import operation cost.\"\"\"\n  dataf = self.import_demand.mul(self.import_electricity_prices.values,\n                                 axis=0)\n  dataf.columns = common.get_multiindex_single_column(\n      site_schema.ResultsSchema.IMPORT_ELECTRICITY_COSTS)\n  return dataf\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_electricity_import_savings","title":"<code>calculate_electricity_import_savings()</code>","text":"<p>Calculate the electricity import savings from self-consuming electricity from PV system.</p> <p>This method calculates the savings by multiplying the avoided import electricity by the import electricity prices. The result is a DataFrame with a single column named 'ELECTRICITY_SAVINGS'.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame containing the electricity import savings.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_electricity_import_savings(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Calculate the electricity import savings from self-consuming electricity from PV system.\n\n  This method calculates the savings by multiplying the avoided import electricity by the import electricity prices.\n  The result is a DataFrame with a single column named 'ELECTRICITY_SAVINGS'.\n\n  Returns:\n      pd.DataFrame: A DataFrame containing the electricity import savings.\n  \"\"\"\n  dataf = self.avoided_import.mul(self.import_electricity_prices.values,\n                                  axis=0)\n  dataf.columns = common.get_multiindex_single_column(\n      site_schema.ResultsSchema.ELECTRICITY_SAVINGS)\n  return dataf\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_electricity_operation_cost","title":"<code>calculate_electricity_operation_cost()</code>","text":"<p>Calculate the electricity operation cost based on a dataframe where first column is import electricity and second column export electricity.</p> <p>This method calculates the import and export electricity operation costs and concatenates them into a single DataFrame.</p> <p>Returns:</p> Type Description <p>pd.DataFrame: A DataFrame containing the electricity import and export operation costs.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_electricity_operation_cost(self):\n  \"\"\"\n  Calculate the electricity operation cost based on a dataframe\n  where first column is import electricity and second column export electricity.\n\n  This method calculates the import and export electricity operation costs and concatenates them into a single DataFrame.\n\n  Returns:\n      pd.DataFrame: A DataFrame containing the electricity import and export operation costs.\n  \"\"\"\n  import_cost = self.calculate_electricity_import_operation_cost()\n  export_cost = self.calculate_electricity_export_operation_cost()\n  return pd.concat([import_cost, export_cost], axis=1)\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_site_electricity_avoided_emissions","title":"<code>calculate_site_electricity_avoided_emissions()</code>","text":"<p>Calculate the site avoided emissions from self-consuming electricity from PV system.</p> <p>This method calculates the avoided emissions by multiplying the avoided import emissions by the import electricity emission factor.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame containing the site avoided emissions.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_site_electricity_avoided_emissions(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Calculate the site avoided emissions from self-consuming electricity from PV system.\n\n  This method calculates the avoided emissions by multiplying the avoided import emissions by the import electricity emission factor.\n\n  Returns:\n      pd.DataFrame: A DataFrame containing the site avoided emissions.    \n\n  \"\"\"\n  dataf = self.avoided_import.mul(\n      self.import_electricity_emission_factor.values, axis=0)\n  dataf.columns = common.get_multiindex_single_column(\n      site_schema.ResultsSchema.SITE_GHG_EMISSIONS_DISPLACED)\n  return dataf\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_total_electricity_avoided_emissions","title":"<code>calculate_total_electricity_avoided_emissions()</code>","text":"<p>Calculate the total avoided emissions from the site.</p> <p>This method calculates the total avoided emissions by summing the avoided import emissions and the onsite generation emissions.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame containing the total avoided emissions.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_total_electricity_avoided_emissions(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Calculate the total avoided emissions from the site.\n\n  This method calculates the total avoided emissions by summing the avoided import emissions and the onsite generation emissions.\n\n  Returns:\n      pd.DataFrame: A DataFrame containing the total avoided emissions.\n  \"\"\"\n  dataf = self.onsite_generation.mul(\n      self.import_electricity_emission_factor.values, axis=0)\n  dataf.columns = common.get_multiindex_single_column(\n      site_schema.ResultsSchema.TOTAL_GHG_EMISSIONS_DISPLACED)\n  return dataf\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.calculate_total_opex","title":"<code>calculate_total_opex(summary_results)</code>","text":"<p>Calculate the total operational expenditure (OPEX) for the scenario.</p> <p>Parameters:</p> Name Type Description Default <code>summary_results</code> <code>DataFrame</code> <p>The summary results of the scenario.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The updated summary results with the total OPEX.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def calculate_total_opex(self,\n                         summary_results: pd.DataFrame) -&gt; pd.DataFrame:\n  \"\"\"\n  Calculate the total operational expenditure (OPEX) for the scenario.\n\n  Args:\n      summary_results (pd.DataFrame): The summary results of the scenario.\n\n  Returns:\n      pd.DataFrame: The updated summary results with the total OPEX.\n  \"\"\"\n  opex_col = self.get_col_name(site_schema.ResultsSchema.OPEX)\n  summary_results.loc[opex_col, self.name] = sum(\n      self.site_model.annual_maintenance_cost.values())\n\n  import_costs = self.get_col_name(\n      site_schema.ResultsSchema.IMPORT_ELECTRICITY_COSTS)\n  export_revenues = self.get_col_name(\n      site_schema.ResultsSchema.EXPORT_ELECTRICITY_REVENUES)\n  summary_results.loc[opex_col, self.name] = summary_results.loc[\n      opex_col, self.name] + summary_results.loc[\n          import_costs, self.name] - summary_results.loc[export_revenues,\n                                                         self.name]\n  return summary_results\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.export_results","title":"<code>export_results()</code>","text":"<p>Export the results of the scenario.</p> <p>This method calculates the current cost, current emissions, site avoided emissions, total avoided emissions, and current cost savings.  It then concatenates these results along with the site energy demand into a single DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame containing the site energy demand, current cost, current cost savings, current emissions, site avoided emissions, and total avoided emissions.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def export_results(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Export the results of the scenario.\n\n  This method calculates the current cost, current emissions, site avoided emissions, total avoided emissions, and current cost savings. \n  It then concatenates these results along with the site energy demand into a single DataFrame.\n\n  Returns:\n      pd.DataFrame: A DataFrame containing the site energy demand, current cost, current cost savings, current emissions, site avoided emissions, and total avoided emissions.\n  \"\"\"\n  current_cost = self.calculate_electricity_operation_cost()\n  current_emissions = self.calculate_electricity_associated_emissions()\n  site_avoided_emissions = self.calculate_site_electricity_avoided_emissions(\n  )\n  total_avoided_emissions = self.calculate_total_electricity_avoided_emissions(\n  )\n  current_cost_savings = self.calculate_electricity_import_savings()\n  return pd.concat([\n      self.site_energy_demand, current_cost, current_cost_savings,\n      current_emissions, site_avoided_emissions, total_avoided_emissions\n  ],\n                   axis=1)\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.format_site_import_electricity_prices","title":"<code>format_site_import_electricity_prices()</code>","text":"<p>Format the import electricity prices DataFrame.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def format_site_import_electricity_prices(self) -&gt; None:\n  \"\"\"\n  Format the import electricity prices DataFrame.\n  \"\"\"\n  if self.import_electricity_prices.shape[1] == 1:\n    price_datetimeindex: pd.DatetimeIndex = self.import_electricity_prices.index\n    if price_datetimeindex.tzinfo is None:\n      self.import_electricity_prices.index = price_datetimeindex.tz_localize(\n          self.timezone)\n    else:\n      self.import_electricity_prices.index = price_datetimeindex.tz_convert(\n          self.timezone)\n    self.import_electricity_prices.index.name = site_schema.ResultsSchema.INDEX\n    self.import_electricity_prices.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.IMPORT_ELECTRICITY_PRICES)\n  else:\n    print(\n        'The import_electricity_prices dataframe has too many columns or was not provided. Some functions of this class may not work.'\n    )\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.get_capacity_by_technology","title":"<code>get_capacity_by_technology(summary_results)</code>","text":"<p>Get the installed capacity by technology for the scenario.</p> <p>Parameters:</p> Name Type Description Default <code>summary_results</code> <code>DataFrame</code> <p>The summary results of the scenario.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The updated summary results with the installed capacity by technology.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def get_capacity_by_technology(\n    self, summary_results: pd.DataFrame) -&gt; pd.DataFrame:\n  \"\"\"\n  Get the installed capacity by technology for the scenario.\n\n  Args:\n      summary_results (pd.DataFrame): The summary results of the scenario.\n\n  Returns:\n      pd.DataFrame: The updated summary results with the installed capacity by technology.\n  \"\"\"\n  for tech_name, tech_cap in self.site_model.size_system.items():\n    col_name = site_schema.ResultsSchema.CAPACITY_INSTALLED\n    col_name = (f'{tech_name.name}_{col_name[0]}', ) + col_name[1:]\n    summary_results.loc[col_name, self.name] = tech_cap\n  return summary_results\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.get_capex_by_technology","title":"<code>get_capex_by_technology(summary_results)</code>","text":"<p>Get the capital expenditure (CAPEX) by technology for the scenario.</p> <p>Parameters:</p> Name Type Description Default <code>summary_results</code> <code>DataFrame</code> <p>The summary results of the scenario.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The updated summary results with the CAPEX by technology.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def get_capex_by_technology(self,\n                            summary_results: pd.DataFrame) -&gt; pd.DataFrame:\n  \"\"\"\n  Get the capital expenditure (CAPEX) by technology for the scenario.\n\n  Args:\n      summary_results (pd.DataFrame): The summary results of the scenario.\n\n  Returns:\n      pd.DataFrame: The updated summary results with the CAPEX by technology.\n  \"\"\"\n  for tech_name, tech_capex in self.site_model.capital_cost.items():\n    col_name = site_schema.ResultsSchema.CAPEX\n    col_name = (f'{tech_name.name}_{col_name[0]}', ) + col_name[1:]\n    summary_results.loc[col_name, self.name] = tech_capex\n  return summary_results\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.get_summary_results","title":"<code>get_summary_results()</code>","text":"<p>Get the summary results for the scenario.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The summary results for the scenario.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def get_summary_results(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Get the summary results for the scenario.\n\n  Returns:\n      pd.DataFrame: The summary results for the scenario.\n  \"\"\"\n  summary_results = self.summary_results.sum().to_frame()\n  summary_results.columns = [self.name]\n  peak_import_col = self.get_col_name(\n      site_schema.ResultsSchema.PEAK_ELECTRICITY_IMPORT)\n  summary_results.loc[peak_import_col,\n                      self.name] = self.import_demand.max().iloc[0] * 2\n  peak_export_col = self.get_col_name(\n      site_schema.ResultsSchema.PEAK_ELECTRICITY_EXPORT)\n  summary_results.loc[peak_export_col,\n                      self.name] = self.export_demand.max().iloc[0] * 2\n\n  summary_results = self.get_capex_by_technology(summary_results)\n  summary_results = self.calculate_total_opex(summary_results)\n  summary_results = self.get_capacity_by_technology(summary_results)\n  return summary_results.astype(float)\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.set_default_export_electricity_prices","title":"<code>set_default_export_electricity_prices(value=0)</code>","text":"<p>Set a default value if no export electricity prices are provided.</p> <p>If the export electricity prices DataFrame is empty, this method will copy the import electricity prices DataFrame, rename its columns to 'EXPORT_ELECTRICITY_REVENUES', and set all its values to the provided default value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The default value to set for export electricity prices. Defaults to 0.</p> <code>0</code> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def set_default_export_electricity_prices(self, value: float = 0):\n  \"\"\"\n  Set a default value if no export electricity prices are provided.\n\n  If the export electricity prices DataFrame is empty, this method will copy the import electricity prices DataFrame,\n  rename its columns to 'EXPORT_ELECTRICITY_REVENUES', and set all its values to the provided default value.\n\n  Args:\n      value (float, optional): The default value to set for export electricity prices. Defaults to 0.\n  \"\"\"\n  if len(self.export_electricity_prices) == 0:\n    self.export_electricity_prices = self.import_electricity_prices.copy()\n    self.export_electricity_prices.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.EXPORT_ELECTRICITY_REVENUES)\n    self.export_electricity_prices.iloc[:, 0] = value\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.set_default_import_electricity_emission_factor","title":"<code>set_default_import_electricity_emission_factor(value=0.15)</code>","text":"<p>Set a default value if no import electricity emission factor is provided.</p> <p>If the import electricity emission factor DataFrame is empty, this method will copy the import electricity prices DataFrame, rename its columns to 'GHG_INTENSITY_IMPORT_ELECTRICITY', and set all its values to the provided default value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The default value to set for import electricity emission factor. Defaults to 0.150.</p> <code>0.15</code> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def set_default_import_electricity_emission_factor(self,\n                                                   value: float = 0.150):\n  \"\"\"\n  Set a default value if no import electricity emission factor is provided.\n\n  If the import electricity emission factor DataFrame is empty, this method will copy the import electricity prices DataFrame,\n  rename its columns to 'GHG_INTENSITY_IMPORT_ELECTRICITY', and set all its values to the provided default value.\n\n  Args:\n      value (float, optional): The default value to set for import electricity emission factor. Defaults to 0.150.\n  \"\"\"\n  if len(self.import_electricity_emission_factor) == 0:\n    self.import_electricity_emission_factor = self.import_electricity_prices.copy(\n    )\n    self.import_electricity_emission_factor.columns = common.get_multiindex_single_column(\n        site_schema.ResultsSchema.GHG_INTENSITY_IMPORT_ELECTRICITY)\n    self.import_electricity_emission_factor.iloc[:, 0] = value\n</code></pre>"},{"location":"reference/analysis/scenario/#analysis.scenario.Scenario.update_results","title":"<code>update_results()</code>","text":"<p>Update the results of the scenario.</p> Source code in <code>e2slib/analysis/scenario.py</code> <pre><code>def update_results(self) -&gt; None:\n  \"\"\"Update the results of the scenario.\"\"\"\n  self.site_energy_demand = self.site_model.export_results()\n  self.summary_results = self.export_results()\n</code></pre>"},{"location":"reference/analysis/simulation/","title":"Simulation","text":""},{"location":"reference/analysis/simulation/#analysis.simulation.SimParameters","title":"<code>SimParameters</code>  <code>dataclass</code>","text":"<p>A class used to store the simulation parameters.</p> <p>Attributes:</p> Name Type Description <code>simulation_year</code> <code>int</code> <p>The simulation year.</p> <code>timesteps</code> <code>str</code> <p>The time steps of the simulation. Defaults to \"30min\".</p> <code>energy_units</code> <code>str</code> <p>The energy units of the simulation. Defaults to \"kWh\".</p> <code>power_units</code> <code>str</code> <p>The power units of the simulation. Defaults to \"kW\".</p> Source code in <code>e2slib/analysis/simulation.py</code> <pre><code>@dataclass\nclass SimParameters:\n  \"\"\"\n  A class used to store the simulation parameters.\n\n  Attributes:\n      simulation_year (int): The simulation year.\n      timesteps (str): The time steps of the simulation. Defaults to \"30min\".\n      energy_units (str): The energy units of the simulation. Defaults to \"kWh\".\n      power_units (str): The power units of the simulation. Defaults to \"kW\".\n  \"\"\"\n  simulation_year: int\n  timesteps: str = \"30min\"\n  energy_units: str = \"kWh\"\n  power_units: str = \"kW\"\n</code></pre>"},{"location":"reference/analysis/site/","title":"Site","text":""},{"location":"reference/analysis/site/#analysis.site.Site","title":"<code>Site</code>  <code>dataclass</code>","text":"<p>A class used to represent a site.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the site.</p> <code>geolocation</code> <code>GeoLocation</code> <p>The geolocation of the site.</p> <code>list_asset_aggregator</code> <code>list[AssetAggregator]</code> <p>The list of asset aggregators in the site.</p> <code>site_electricity_demand</code> <code>DataFrame</code> <p>The site electricity demand (default is an empty DataFrame).</p> <code>saving_path</code> <code>Path</code> <p>The path to save the results (default is the parent directory of the current directory).</p> <p>Methods:</p> Name Description <code>timezone</code> <p>Get the timezone of the site.</p> <code>size_system</code> <p>Get the size of the systems in the site.</p> <code>capital_cost</code> <p>Get the capital cost of the systems in the site.</p> <code>annual_maintenance_cost</code> <p>Get the annual maintenance cost of the systems in the site.</p> <code>add_asset_aggregator</code> <p>protocols.AssetAggregator): Add an asset aggregator to the site.</p> <code>format_site_electricity_demand_data</code> <p>Format the site electricity demand data.</p> <code>get_total_capacity_installed</code> <p>Get the total capacity installed in the site.</p> <code>get_import_and_export_demand</code> <p>pd.DataFrame): Get the import and export demand from the site electricity demand.</p> <code>aggregators_additional_demand</code> <p>Get the additional demand from the asset aggregators.</p> <code>total_additional_demand</code> <p>Get the total additional demand from the asset aggregators.</p> <code>get_dict_assets</code> <p>Get the dictionary of assets in the site.</p> <code>aggregators_onsite_generation</code> <p>Get the onsite generation from the asset aggregators.</p> <code>total_onsite_generation</code> <p>Get the total onsite generation from the asset aggregators.</p> <code>get_avoided_electricity_import</code> <p>pd.DataFrame, export_demand: pd.DataFrame): Get the avoided electricity import from the onsite generation and export demand.</p> <code>export_results</code> <p>Export the results of the site analysis.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>@dataclass\nclass Site:\n  \"\"\"\n  A class used to represent a site.\n\n  Attributes:\n      name (str): The name of the site.\n      geolocation (location.GeoLocation): The geolocation of the site.\n      list_asset_aggregator (list[protocols.AssetAggregator]): The list of asset aggregators in the site.\n      site_electricity_demand (pd.DataFrame): The site electricity demand (default is an empty DataFrame).\n      saving_path (Path): The path to save the results (default is the parent directory of the current directory).\n\n  Methods:\n      timezone(): Get the timezone of the site.\n      size_system(): Get the size of the systems in the site.\n      capital_cost(): Get the capital cost of the systems in the site.\n      annual_maintenance_cost(): Get the annual maintenance cost of the systems in the site.\n      add_asset_aggregator(asset_aggregator: protocols.AssetAggregator): Add an asset aggregator to the site.\n      format_site_electricity_demand_data(): Format the site electricity demand data.\n      get_total_capacity_installed(): Get the total capacity installed in the site.\n      get_import_and_export_demand(dataf: pd.DataFrame): Get the import and export demand from the site electricity demand.\n      aggregators_additional_demand(): Get the additional demand from the asset aggregators.\n      total_additional_demand(): Get the total additional demand from the asset aggregators.\n      get_dict_assets(): Get the dictionary of assets in the site.\n      aggregators_onsite_generation(): Get the onsite generation from the asset aggregators.\n      total_onsite_generation(): Get the total onsite generation from the asset aggregators.\n      get_avoided_electricity_import(onsite_gen: pd.DataFrame, export_demand: pd.DataFrame): Get the avoided electricity import from the onsite generation and export demand.\n      export_results(): Export the results of the site analysis.\n  \"\"\"\n  name: str\n  geolocation: location.GeoLocation\n  list_asset_aggregator: list[protocols.AssetAggregator]\n  site_electricity_demand: pd.DataFrame = field(default_factory=pd.DataFrame)\n  saving_path: Path = Path(r\"../\")\n\n  def __post_init__(self):\n    self.format_site_electricity_demand_data()\n    print(f\"The results will be stored at:\\n{self.saving_path.resolve()}\")\n\n  @property\n  def timezone(self) -&gt; str:\n    return self.geolocation.timezone\n\n  @property\n  def size_system(self) -&gt; dict[enums.TechnologyType, float]:\n    frames: list[dict[enums.TechnologyType, float]] = []\n    for temp_asset_aggregator in self.list_asset_aggregator:\n      frames.append(temp_asset_aggregator.size_system)\n    return sum_dict(frames)\n\n  @property\n  def capital_cost(self) -&gt; dict[enums.TechnologyType, float]:\n    frames: list[dict[enums.TechnologyType, float]] = []\n    for temp_asset_aggregator in self.list_asset_aggregator:\n      frames.append(temp_asset_aggregator.capital_cost)\n    return sum_dict(frames)\n\n  @property\n  def annual_maintenance_cost(self) -&gt; dict[enums.TechnologyType, float]:\n    frames: list[dict[enums.TechnologyType, float]] = []\n    for temp_asset_aggregator in self.list_asset_aggregator:\n      frames.append(temp_asset_aggregator.annual_maintenance_cost)\n    return sum_dict(frames)\n\n  def add_asset_aggregator(\n      self, asset_aggregator: protocols.AssetAggregator) -&gt; None:\n    self.list_asset_aggregator.append(asset_aggregator)\n\n  def format_site_electricity_demand_data(self) -&gt; None:\n    if self.site_electricity_demand.shape[1] == 1:\n      self.site_electricity_demand = functions.resample_and_fill_missing_data(\n          self.site_electricity_demand, freq=\"30min\")\n\n      demand_datetimeindex: pd.DatetimeIndex = self.site_electricity_demand.index\n      if demand_datetimeindex.tzinfo is None:\n        self.site_electricity_demand.index = demand_datetimeindex.tz_localize(\n            self.geolocation.timezone)\n      else:\n        self.site_electricity_demand.index = demand_datetimeindex.tz_convert(\n            self.geolocation.timezone)\n\n      self.site_electricity_demand.index.name = site_schema.SiteDataSchema.INDEX\n      self.site_electricity_demand.columns = common.get_multiindex_single_column(\n          site_schema.SiteDataSchema.INIT_SITE_ELECTRICITY_DEMAND)\n    else:\n      print(\n          'The site_electricity_demand dataframe has too many columns or was not provided. Some functions of this class may not work.'\n      )\n\n  def get_import_and_export_demand(\n      self, dataf: pd.DataFrame) -&gt; tuple[pd.DataFrame, pd.DataFrame]:\n    \"\"\"Get the import and export demand from the site electricity demand.\n\n    Args:\n      dataf (pd.DataFrame): The site electricity demand.\n\n    Returns:\n      tuple[pd.DataFrame, pd.DataFrame]: The import and export demand from the site electricity demand.\n    \"\"\"\n    import_dataf = dataf.copy()\n\n    filt = import_dataf.values &lt; 0\n    import_dataf.loc[filt] = 0\n\n    export_dataf = dataf.copy()\n    filt = export_dataf.values &gt; 0\n    export_dataf.loc[filt] = 0\n    export_dataf = -export_dataf\n\n    import_dataf.columns = common.get_multiindex_single_column(\n        site_schema.SiteDataSchema.IMPORT_ELECTRICITY_DEMAND)\n    export_dataf.columns = common.get_multiindex_single_column(\n        site_schema.SiteDataSchema.EXPORT_ELECTRICITY_DEMAND)\n    return import_dataf, export_dataf\n\n  def aggregators_additional_demand(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the additional demand from the asset aggregators.\n\n    Returns:\n        pd.DataFrame: The additional demand from the asset aggregators.\n    \"\"\"\n    frames = []\n    additional_demand = pd.DataFrame()\n    for temp_aggregator in self.list_asset_aggregator:\n      temp_dataf = pd.concat(\n          {temp_aggregator.name: temp_aggregator.additional_demand}, axis=1)\n      frames.append(temp_dataf)\n      additional_demand = pd.concat(frames, axis=1)\n    return additional_demand\n\n  def total_additional_demand(self) -&gt; pd.DataFrame:\n    \"\"\"Total site additional demand from EV chargers, etc.\n\n    Returns:\n        pd.DataFrame: The total additional demand from the asset aggregators.\n    \"\"\"\n    col_name = common.get_multiindex_single_column(\n        site_schema.SiteDataSchema.ADDITIONAL_ELECTRICITY_DEMAND)\n    systems_demand = self.aggregators_additional_demand()\n    if len(systems_demand) == 0:\n      systems_demand = pd.DataFrame(index=self.site_electricity_demand.index,\n                                    columns=col_name)\n      systems_demand.iloc[:, 0] = 0\n    else:\n      systems_demand = systems_demand.sum(axis=1).to_frame()\n      systems_demand.columns = col_name\n    return systems_demand.astype(float)\n\n  def aggregators_onsite_generation(self) -&gt; pd.DataFrame:\n    \"\"\"Get the onsite generation from the asset aggregators.\n\n    Returns:\n        pd.DataFrame: The onsite generation from the asset aggregators.\n    \"\"\"\n    frames = []\n    onsite_gen = pd.DataFrame()\n    for temp_aggregator in self.list_asset_aggregator:\n      temp_dataf = pd.concat(\n          {temp_aggregator.name: temp_aggregator.onsite_generation}, axis=1)\n      frames.append(temp_dataf)\n      onsite_gen = pd.concat(frames, axis=1)\n    return onsite_gen\n\n  def total_onsite_generation(self) -&gt; pd.DataFrame:\n    \"\"\"Total site electricity generation.\n\n    Returns:\n        pd.DataFrame: The total onsite generation from the asset aggregators.\n    \"\"\"\n    col_name = common.get_multiindex_single_column(\n        site_schema.SiteDataSchema.ELECTRICITY_GENERATION)\n    onsite_gen = self.aggregators_onsite_generation()\n    if len(onsite_gen) == 0:\n      onsite_gen = pd.DataFrame(index=self.site_electricity_demand.index,\n                                columns=col_name)\n      onsite_gen.iloc[:, 0] = 0\n    else:\n      onsite_gen = onsite_gen.sum(axis=1).to_frame()\n      onsite_gen.columns = col_name\n    return onsite_gen.astype(float)\n\n  def get_avoided_electricity_import(\n      self, onsite_gen: pd.DataFrame,\n      export_demand: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the avoided electricity import from the onsite generation and export demand.\n\n    This method calculates the avoided electricity import by comparing the onsite generation\n    with the export demand.\n\n    Args:\n        onsite_gen (pd.DataFrame): The onsite generation DataFrame.\n        export_demand (pd.DataFrame): The export demand DataFrame.\n\n    Returns:\n        pd.DataFrame: The avoided electricity import from the onsite generation and export demand.\n    \"\"\"\n    avoided_import = onsite_gen.copy()\n    filt = export_demand.values &gt; 0\n    avoided_import.loc[filt] = self.site_electricity_demand.loc[filt]\n    avoided_import.columns = common.get_multiindex_single_column(\n        site_schema.SiteDataSchema.SELF_CONSUMED_ELECTRICITY)\n    return avoided_import\n\n  def export_results(self) -&gt; pd.DataFrame:\n    \"\"\"Export the results of the site analysis.\n\n    Returns:\n        pd.DataFrame: The results of the site analysis.\n    \"\"\"\n    additional_demand = self.total_additional_demand()\n    on_site_gen = self.total_onsite_generation()\n    total_elec_demand = self.site_electricity_demand.copy()\n    total_elec_demand = total_elec_demand + additional_demand.values\n    net_elec_demand = total_elec_demand.copy()\n    net_elec_demand = total_elec_demand - on_site_gen.values\n    import_demand, export_demand = self.get_import_and_export_demand(\n        net_elec_demand)\n    avoided_import_electricity = self.get_avoided_electricity_import(\n        on_site_gen, export_demand)\n    return pd.concat([\n        import_demand, export_demand, on_site_gen, additional_demand,\n        self.site_electricity_demand, avoided_import_electricity\n    ],\n                     axis=1).astype(float)\n</code></pre>"},{"location":"reference/analysis/site/#analysis.site.Site.aggregators_additional_demand","title":"<code>aggregators_additional_demand()</code>","text":"<p>Get the additional demand from the asset aggregators.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The additional demand from the asset aggregators.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>def aggregators_additional_demand(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Get the additional demand from the asset aggregators.\n\n  Returns:\n      pd.DataFrame: The additional demand from the asset aggregators.\n  \"\"\"\n  frames = []\n  additional_demand = pd.DataFrame()\n  for temp_aggregator in self.list_asset_aggregator:\n    temp_dataf = pd.concat(\n        {temp_aggregator.name: temp_aggregator.additional_demand}, axis=1)\n    frames.append(temp_dataf)\n    additional_demand = pd.concat(frames, axis=1)\n  return additional_demand\n</code></pre>"},{"location":"reference/analysis/site/#analysis.site.Site.aggregators_onsite_generation","title":"<code>aggregators_onsite_generation()</code>","text":"<p>Get the onsite generation from the asset aggregators.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The onsite generation from the asset aggregators.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>def aggregators_onsite_generation(self) -&gt; pd.DataFrame:\n  \"\"\"Get the onsite generation from the asset aggregators.\n\n  Returns:\n      pd.DataFrame: The onsite generation from the asset aggregators.\n  \"\"\"\n  frames = []\n  onsite_gen = pd.DataFrame()\n  for temp_aggregator in self.list_asset_aggregator:\n    temp_dataf = pd.concat(\n        {temp_aggregator.name: temp_aggregator.onsite_generation}, axis=1)\n    frames.append(temp_dataf)\n    onsite_gen = pd.concat(frames, axis=1)\n  return onsite_gen\n</code></pre>"},{"location":"reference/analysis/site/#analysis.site.Site.export_results","title":"<code>export_results()</code>","text":"<p>Export the results of the site analysis.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The results of the site analysis.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>def export_results(self) -&gt; pd.DataFrame:\n  \"\"\"Export the results of the site analysis.\n\n  Returns:\n      pd.DataFrame: The results of the site analysis.\n  \"\"\"\n  additional_demand = self.total_additional_demand()\n  on_site_gen = self.total_onsite_generation()\n  total_elec_demand = self.site_electricity_demand.copy()\n  total_elec_demand = total_elec_demand + additional_demand.values\n  net_elec_demand = total_elec_demand.copy()\n  net_elec_demand = total_elec_demand - on_site_gen.values\n  import_demand, export_demand = self.get_import_and_export_demand(\n      net_elec_demand)\n  avoided_import_electricity = self.get_avoided_electricity_import(\n      on_site_gen, export_demand)\n  return pd.concat([\n      import_demand, export_demand, on_site_gen, additional_demand,\n      self.site_electricity_demand, avoided_import_electricity\n  ],\n                   axis=1).astype(float)\n</code></pre>"},{"location":"reference/analysis/site/#analysis.site.Site.get_avoided_electricity_import","title":"<code>get_avoided_electricity_import(onsite_gen, export_demand)</code>","text":"<p>Get the avoided electricity import from the onsite generation and export demand.</p> <p>This method calculates the avoided electricity import by comparing the onsite generation with the export demand.</p> <p>Parameters:</p> Name Type Description Default <code>onsite_gen</code> <code>DataFrame</code> <p>The onsite generation DataFrame.</p> required <code>export_demand</code> <code>DataFrame</code> <p>The export demand DataFrame.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The avoided electricity import from the onsite generation and export demand.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>def get_avoided_electricity_import(\n    self, onsite_gen: pd.DataFrame,\n    export_demand: pd.DataFrame) -&gt; pd.DataFrame:\n  \"\"\"\n  Get the avoided electricity import from the onsite generation and export demand.\n\n  This method calculates the avoided electricity import by comparing the onsite generation\n  with the export demand.\n\n  Args:\n      onsite_gen (pd.DataFrame): The onsite generation DataFrame.\n      export_demand (pd.DataFrame): The export demand DataFrame.\n\n  Returns:\n      pd.DataFrame: The avoided electricity import from the onsite generation and export demand.\n  \"\"\"\n  avoided_import = onsite_gen.copy()\n  filt = export_demand.values &gt; 0\n  avoided_import.loc[filt] = self.site_electricity_demand.loc[filt]\n  avoided_import.columns = common.get_multiindex_single_column(\n      site_schema.SiteDataSchema.SELF_CONSUMED_ELECTRICITY)\n  return avoided_import\n</code></pre>"},{"location":"reference/analysis/site/#analysis.site.Site.get_import_and_export_demand","title":"<code>get_import_and_export_demand(dataf)</code>","text":"<p>Get the import and export demand from the site electricity demand.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The site electricity demand.</p> required <p>Returns:</p> Type Description <code>tuple[DataFrame, DataFrame]</code> <p>tuple[pd.DataFrame, pd.DataFrame]: The import and export demand from the site electricity demand.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>def get_import_and_export_demand(\n    self, dataf: pd.DataFrame) -&gt; tuple[pd.DataFrame, pd.DataFrame]:\n  \"\"\"Get the import and export demand from the site electricity demand.\n\n  Args:\n    dataf (pd.DataFrame): The site electricity demand.\n\n  Returns:\n    tuple[pd.DataFrame, pd.DataFrame]: The import and export demand from the site electricity demand.\n  \"\"\"\n  import_dataf = dataf.copy()\n\n  filt = import_dataf.values &lt; 0\n  import_dataf.loc[filt] = 0\n\n  export_dataf = dataf.copy()\n  filt = export_dataf.values &gt; 0\n  export_dataf.loc[filt] = 0\n  export_dataf = -export_dataf\n\n  import_dataf.columns = common.get_multiindex_single_column(\n      site_schema.SiteDataSchema.IMPORT_ELECTRICITY_DEMAND)\n  export_dataf.columns = common.get_multiindex_single_column(\n      site_schema.SiteDataSchema.EXPORT_ELECTRICITY_DEMAND)\n  return import_dataf, export_dataf\n</code></pre>"},{"location":"reference/analysis/site/#analysis.site.Site.total_additional_demand","title":"<code>total_additional_demand()</code>","text":"<p>Total site additional demand from EV chargers, etc.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The total additional demand from the asset aggregators.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>def total_additional_demand(self) -&gt; pd.DataFrame:\n  \"\"\"Total site additional demand from EV chargers, etc.\n\n  Returns:\n      pd.DataFrame: The total additional demand from the asset aggregators.\n  \"\"\"\n  col_name = common.get_multiindex_single_column(\n      site_schema.SiteDataSchema.ADDITIONAL_ELECTRICITY_DEMAND)\n  systems_demand = self.aggregators_additional_demand()\n  if len(systems_demand) == 0:\n    systems_demand = pd.DataFrame(index=self.site_electricity_demand.index,\n                                  columns=col_name)\n    systems_demand.iloc[:, 0] = 0\n  else:\n    systems_demand = systems_demand.sum(axis=1).to_frame()\n    systems_demand.columns = col_name\n  return systems_demand.astype(float)\n</code></pre>"},{"location":"reference/analysis/site/#analysis.site.Site.total_onsite_generation","title":"<code>total_onsite_generation()</code>","text":"<p>Total site electricity generation.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The total onsite generation from the asset aggregators.</p> Source code in <code>e2slib/analysis/site.py</code> <pre><code>def total_onsite_generation(self) -&gt; pd.DataFrame:\n  \"\"\"Total site electricity generation.\n\n  Returns:\n      pd.DataFrame: The total onsite generation from the asset aggregators.\n  \"\"\"\n  col_name = common.get_multiindex_single_column(\n      site_schema.SiteDataSchema.ELECTRICITY_GENERATION)\n  onsite_gen = self.aggregators_onsite_generation()\n  if len(onsite_gen) == 0:\n    onsite_gen = pd.DataFrame(index=self.site_electricity_demand.index,\n                              columns=col_name)\n    onsite_gen.iloc[:, 0] = 0\n  else:\n    onsite_gen = onsite_gen.sum(axis=1).to_frame()\n    onsite_gen.columns = col_name\n  return onsite_gen.astype(float)\n</code></pre>"},{"location":"reference/common/","title":"Index","text":""},{"location":"reference/common/common/","title":"Common","text":""},{"location":"reference/common/common/#common.common.get_multiindex_multiple_columns","title":"<code>get_multiindex_multiple_columns(list_columns)</code>","text":"<p>Create a multiindex with the given list of columns.</p> <p>Parameters:</p> Name Type Description Default <code>list_columns</code> <code>list[tuple[str, str]]</code> <p>The list of columns.</p> required <p>Returns:</p> Type Description <code>MultiIndex</code> <p>pd.MultiIndex: The multiindex with the list of columns.</p> Source code in <code>e2slib/common/common.py</code> <pre><code>def get_multiindex_multiple_columns(\n    list_columns: list[tuple[str, str]]) -&gt; pd.MultiIndex:\n  \"\"\"\n  Create a multiindex with the given list of columns.\n\n  Args:\n      list_columns (list[tuple[str, str]]): The list of columns.\n\n  Returns:\n      pd.MultiIndex: The multiindex with the list of columns.\n  \"\"\"\n  return pd.MultiIndex.from_tuples(list_columns, names=['Parameters', 'Units'])\n</code></pre>"},{"location":"reference/common/common/#common.common.get_multiindex_single_column","title":"<code>get_multiindex_single_column(schema_column)</code>","text":"<p>Create a multiindex with a column schema.</p> <p>Parameters:</p> Name Type Description Default <code>schema_column</code> <code>tuple[str, str]</code> <p>The column schema.</p> required <p>Returns:</p> Type Description <code>MultiIndex</code> <p>pd.MultiIndex: The multiindex with the column schema.</p> Source code in <code>e2slib/common/common.py</code> <pre><code>def get_multiindex_single_column(\n    schema_column: tuple[str, str]) -&gt; pd.MultiIndex:\n  \"\"\"\n  Create a multiindex with a column schema.\n\n  Args:\n      schema_column (tuple[str, str]): The column schema.\n\n  Returns:\n      pd.MultiIndex: The multiindex with the column schema.\n  \"\"\"\n  return get_multiindex_multiple_columns([schema_column])\n</code></pre>"},{"location":"reference/site/","title":"Index","text":""},{"location":"reference/site/schedule/","title":"Schedule","text":""},{"location":"reference/site/schedule/#site.schedule.OccupancySchedule","title":"<code>OccupancySchedule</code>  <code>dataclass</code>","text":"<p>A class used to represent an occupancy schedule for each day of the week for each hour.</p> <p>Attributes:</p> Name Type Description <code>occupancy_dict</code> <code>dict[int, list[tuple[int, int]]] | None</code> <p>A dictionary where the keys are the days of the week (0-6) and the values are lists of tuples representing the start and end times of occupancy.</p> <code>timestep</code> <code>TimeStep</code> <p>The timestep of the occupancy schedule.</p> <p>Methods:</p> Name Description <code>or_operator</code> <p>list[bool], list_2: list[bool]) -&gt; list[bool]: Perform a logical OR operation on two lists of boolean values.</p> <code>and_operator</code> <p>list[bool], list_2: list[bool]) -&gt; list[bool]: Perform a logical AND operation on two lists of boolean values.</p> <code>get_filter</code> <p>pd.DataFrame) -&gt; list[bool]: Get a filter for a DataFrame based on the occupancy schedule.</p> <code>filter_df</code> <p>pd.DataFrame, occupied: bool = True): Filter a DataFrame with datetimeindex based on the occupancy schedule.</p> Source code in <code>e2slib/site/schedule.py</code> <pre><code>@dataclass\nclass OccupancySchedule:\n  \"\"\"\n  A class used to represent an occupancy schedule for each day of the week for each hour.\n\n  Attributes:\n      occupancy_dict (dict[int, list[tuple[int, int]]] | None): A dictionary where the keys are the days of the week (0-6) and the values are lists of tuples representing the start and end times of occupancy.\n      timestep (enums.TimeStep): The timestep of the occupancy schedule.\n\n  Methods:\n      or_operator(list_1: list[bool], list_2: list[bool]) -&gt; list[bool]: Perform a logical OR operation on two lists of boolean values.\n      and_operator(list_1: list[bool], list_2: list[bool]) -&gt; list[bool]: Perform a logical AND operation on two lists of boolean values.\n      get_filter(dataf: pd.DataFrame) -&gt; list[bool]: Get a filter for a DataFrame based on the occupancy schedule.\n      filter_df(dataf: pd.DataFrame, occupied: bool = True): Filter a DataFrame with datetimeindex based on the occupancy schedule.\n  \"\"\"\n  occupancy_dict: dict[int, list[tuple[int, int]]] | None = None\n  timestep: datetime_schema.DateTimeSchema = datetime_schema.DateTimeSchema.HALFHOUR\n\n  def __post_init__(self):\n    if self.occupancy_dict is None:\n      default_occupancy: dict[int, list[tuple[int, int]]] = {\n          0: [(16, 34)],\n          1: [(16, 34)],\n          2: [(16, 34)],\n          3: [(16, 34)],\n          4: [(16, 34)],\n          5: [],\n          6: []\n      }\n      self.occupancy_dict = default_occupancy\n\n  def or_operator(self, list_1: list[bool], list_2: list[bool]) -&gt; list[bool]:\n    return [a or b for a, b in zip(list_1, list_2)]\n\n  def and_operator(self, list_1: list[bool], list_2: list[bool]) -&gt; list[bool]:\n    return [a and b for a, b in zip(list_1, list_2)]\n\n  def get_filter(self, dataf: pd.DataFrame) -&gt; list[bool]:\n    \"\"\"\n    Get a filter for a DataFrame based on the occupancy schedule.\n\n    Args:\n        dataf (pd.DataFrame): The DataFrame to filter.\n\n    Returns:\n        list[bool]: The filter for the DataFrame.\n    \"\"\"\n    temp_filt = [False] * len(dataf)\n    temp_day_filt = [False] * len(dataf)\n    time_col = self.timestep\n    assert self.occupancy_dict is not None\n    for temp_day, temp_hours in self.occupancy_dict.items():\n      print(temp_day)\n      temp_day_filt = list(\n          (dataf[datetime_schema.DateTimeSchema.DAYOFWEEK] == temp_day))\n      temp_final_time_filt = [False] * len(dataf)\n      for start_time, end_time in temp_hours:\n        start_time_filt = list(start_time &lt;= dataf[time_col])\n        end_time_filt = list(dataf[time_col] &lt;= end_time)\n        temp_time_filt = self.and_operator(start_time_filt, end_time_filt)\n        temp_final_time_filt = self.or_operator(temp_final_time_filt,\n                                                temp_time_filt)\n\n      temp_day_filt = self.and_operator(temp_day_filt, temp_final_time_filt)\n      temp_filt = self.or_operator(temp_filt, temp_day_filt)\n    return temp_filt\n\n  def filter_df(self, dataf: pd.DataFrame, occupied: bool = True):\n    \"\"\"\n    Filter a DataFrame with datetimeindex based on the occupancy schedule.\n\n    Args:\n        dataf (pd.DataFrame): The DataFrame to filter.\n        occupied (bool, optional): Whether to filter for occupied or unoccupied times. Defaults to True.\n\n    Returns:\n        pd.DataFrame: The filtered DataFrame.\n    \"\"\"\n    filt = self.get_filter(dataf)\n    if occupied:\n      return dataf[filt]\n    else:\n      filt = [not a for a in filt]\n      return dataf[filt]\n</code></pre>"},{"location":"reference/site/schedule/#site.schedule.OccupancySchedule.filter_df","title":"<code>filter_df(dataf, occupied=True)</code>","text":"<p>Filter a DataFrame with datetimeindex based on the occupancy schedule.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The DataFrame to filter.</p> required <code>occupied</code> <code>bool</code> <p>Whether to filter for occupied or unoccupied times. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <p>pd.DataFrame: The filtered DataFrame.</p> Source code in <code>e2slib/site/schedule.py</code> <pre><code>def filter_df(self, dataf: pd.DataFrame, occupied: bool = True):\n  \"\"\"\n  Filter a DataFrame with datetimeindex based on the occupancy schedule.\n\n  Args:\n      dataf (pd.DataFrame): The DataFrame to filter.\n      occupied (bool, optional): Whether to filter for occupied or unoccupied times. Defaults to True.\n\n  Returns:\n      pd.DataFrame: The filtered DataFrame.\n  \"\"\"\n  filt = self.get_filter(dataf)\n  if occupied:\n    return dataf[filt]\n  else:\n    filt = [not a for a in filt]\n    return dataf[filt]\n</code></pre>"},{"location":"reference/site/schedule/#site.schedule.OccupancySchedule.get_filter","title":"<code>get_filter(dataf)</code>","text":"<p>Get a filter for a DataFrame based on the occupancy schedule.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The DataFrame to filter.</p> required <p>Returns:</p> Type Description <code>list[bool]</code> <p>list[bool]: The filter for the DataFrame.</p> Source code in <code>e2slib/site/schedule.py</code> <pre><code>def get_filter(self, dataf: pd.DataFrame) -&gt; list[bool]:\n  \"\"\"\n  Get a filter for a DataFrame based on the occupancy schedule.\n\n  Args:\n      dataf (pd.DataFrame): The DataFrame to filter.\n\n  Returns:\n      list[bool]: The filter for the DataFrame.\n  \"\"\"\n  temp_filt = [False] * len(dataf)\n  temp_day_filt = [False] * len(dataf)\n  time_col = self.timestep\n  assert self.occupancy_dict is not None\n  for temp_day, temp_hours in self.occupancy_dict.items():\n    print(temp_day)\n    temp_day_filt = list(\n        (dataf[datetime_schema.DateTimeSchema.DAYOFWEEK] == temp_day))\n    temp_final_time_filt = [False] * len(dataf)\n    for start_time, end_time in temp_hours:\n      start_time_filt = list(start_time &lt;= dataf[time_col])\n      end_time_filt = list(dataf[time_col] &lt;= end_time)\n      temp_time_filt = self.and_operator(start_time_filt, end_time_filt)\n      temp_final_time_filt = self.or_operator(temp_final_time_filt,\n                                              temp_time_filt)\n\n    temp_day_filt = self.and_operator(temp_day_filt, temp_final_time_filt)\n    temp_filt = self.or_operator(temp_filt, temp_day_filt)\n  return temp_filt\n</code></pre>"},{"location":"reference/structures/","title":"Index","text":""},{"location":"reference/structures/datetime_schema/","title":"Datetime schema","text":""},{"location":"reference/structures/datetime_schema/#structures.datetime_schema.DateTimeSchema","title":"<code>DateTimeSchema</code>","text":"<p>             Bases: <code>StrEnum</code></p> <p>A class used to represent a schema for datetime-related constants.</p> <p>Attributes:</p> Name Type Description <code>HOUR</code> <code>str</code> <p>Constant for hour.</p> <code>MINUTES</code> <code>str</code> <p>Constant for minutes.</p> <code>SECONDS</code> <code>str</code> <p>Constant for seconds.</p> <code>MONTH</code> <code>str</code> <p>Constant for month.</p> <code>DAYOFWEEK</code> <code>str</code> <p>Constant for day of the week.</p> <code>WEEKDAYFLAG</code> <code>str</code> <p>Constant for weekday flag.</p> <code>YEAR</code> <code>str</code> <p>Constant for year.</p> <code>HALFHOUR</code> <code>str</code> <p>Constant for half-hour.</p> <code>DATE</code> <code>str</code> <p>Constant for date.</p> <code>WEEK</code> <code>str</code> <p>Constant for week.</p> <code>DAYOFYEAR</code> <code>str</code> <p>Constant for day of the year.</p> <code>DATETIME</code> <code>str</code> <p>Constant for datetime.</p> <code>TIME</code> <code>str</code> <p>Constant for time.</p> <code>WEEKEND</code> <code>str</code> <p>Constant for weekend.</p> <code>SEASON</code> <code>str</code> <p>Constant for season.</p> <code>SEASON_NUM</code> <code>str</code> <p>Constant for season number.</p> Source code in <code>e2slib/structures/datetime_schema.py</code> <pre><code>class DateTimeSchema(StrEnum):\n  \"\"\"A class used to represent a schema for datetime-related constants.\n\n  Attributes:\n    HOUR (str): Constant for hour.\n    MINUTES (str): Constant for minutes.\n    SECONDS (str): Constant for seconds.\n    MONTH (str): Constant for month.\n    DAYOFWEEK (str): Constant for day of the week.\n    WEEKDAYFLAG (str): Constant for weekday flag.\n    YEAR (str): Constant for year.\n    HALFHOUR (str): Constant for half-hour.\n    DATE (str): Constant for date.\n    WEEK (str): Constant for week.\n    DAYOFYEAR (str): Constant for day of the year.\n    DATETIME (str): Constant for datetime.\n    TIME (str): Constant for time.\n    WEEKEND (str): Constant for weekend.\n    SEASON (str): Constant for season.\n    SEASON_NUM (str): Constant for season number.\n  \"\"\"\n\n  HOUR = 'Hour'\n  MINUTES = 'Minutes'\n  SECONDS = 'Seconds'\n  MONTH = 'Month'\n  DAYOFWEEK = 'Day of week'\n  WEEKDAYFLAG = 'Weekday flag'\n  YEAR = 'Year'\n  HALFHOUR = 'Half-hour'\n  DATE = 'Date'\n  WEEK = 'Week'\n  DAYOFYEAR = 'Day of year'\n  DATETIME = 'Datetime'\n  TIME = 'time'\n  WEEKEND = 'weekend'\n  SEASON = 'season'\n  SEASON_NUM = 'season_number'\n</code></pre>"},{"location":"reference/structures/enums/","title":"Enums","text":""},{"location":"reference/structures/enums/#structures.enums.Charts","title":"<code>Charts</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for charts.</p> <p>Attributes:</p> Name Type Description <code>HH_LABEL</code> <code>Enum</code> <p>An enumeration member representing the half-hourly chart.</p> <code>DAILY_LABEL</code> <code>Enum</code> <p>An enumeration member representing the daily chart.</p> <code>WEEKLY_LABEL</code> <code>Enum</code> <p>An enumeration member representing the weekly chart.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class Charts(Enum):\n  \"\"\"\n  An enumeration class for charts.\n\n  Attributes:\n    HH_LABEL (Enum): An enumeration member representing the half-hourly chart.\n    DAILY_LABEL (Enum): An enumeration member representing the daily chart.\n    WEEKLY_LABEL (Enum): An enumeration member representing the weekly chart.\n  \"\"\"\n  HH_LABEL = \"half-hourly\"\n  DAILY_LABEL = \"daily\"\n  WEEKLY_LABEL = \"weekly\"\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.Destination","title":"<code>Destination</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for energy carriers.</p> <p>Attributes:</p> Name Type Description <code>ELECTRICITY</code> <code>Enum</code> <p>An enumeration member representing electricity.</p> <code>GAS</code> <code>Enum</code> <p>An enumeration member representing gas.</p> <code>HEAT</code> <code>Enum</code> <p>An enumeration member representing heat.</p> <code>COOLING</code> <code>Enum</code> <p>An enumeration member representing cooling.</p> <code>UNCATEGORIZED</code> <code>Enum</code> <p>An enumeration member representing an uncategorized energy carrier.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class Destination(Enum):\n  \"\"\"\n  An enumeration class for energy carriers.\n\n  Attributes:\n      ELECTRICITY (Enum): An enumeration member representing electricity.\n      GAS (Enum): An enumeration member representing gas.\n      HEAT (Enum): An enumeration member representing heat.\n      COOLING (Enum): An enumeration member representing cooling.\n      UNCATEGORIZED (Enum): An enumeration member representing an uncategorized energy carrier.\n  \"\"\"\n\n  IMPORT = auto()\n  EXPORT = auto()\n  ONSITE = auto()\n  INPUT = auto()\n  OUTPUT = auto()\n  DEMAND = auto()\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.DispatchStrategy","title":"<code>DispatchStrategy</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for dispatch strategies.</p> <p>Attributes:</p> Name Type Description <code>ELECTRICITYLED</code> <code>Enum</code> <p>An enumeration member representing the electricity-led strategy.</p> <code>THERMALLED</code> <code>Enum</code> <p>An enumeration member representing the thermal-led strategy.</p> <code>CUSTOM</code> <code>Enum</code> <p>An enumeration member representing a custom strategy.</p> <code>ACTUAL</code> <code>Enum</code> <p>An enumeration member representing an actual strategy.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class DispatchStrategy(Enum):\n  \"\"\"\n  An enumeration class for dispatch strategies.\n\n  Attributes:\n    ELECTRICITYLED (Enum): An enumeration member representing the electricity-led strategy.\n    THERMALLED (Enum): An enumeration member representing the thermal-led strategy.\n    CUSTOM (Enum): An enumeration member representing a custom strategy.\n    ACTUAL (Enum): An enumeration member representing an actual strategy.\n  \"\"\"\n  ELECTRICITYLED = auto()\n  THERMALLED = auto()\n  CUSTOM = auto()\n  ACTUAL = auto()\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.EnergyCarrier","title":"<code>EnergyCarrier</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for energy carriers.</p> <p>Attributes:</p> Name Type Description <code>ELECTRICITY</code> <code>Enum</code> <p>An enumeration member representing electricity.</p> <code>GAS</code> <code>Enum</code> <p>An enumeration member representing gas.</p> <code>HEAT</code> <code>Enum</code> <p>An enumeration member representing heat.</p> <code>COOLING</code> <code>Enum</code> <p>An enumeration member representing cooling.</p> <code>UNCATEGORIZED</code> <code>Enum</code> <p>An enumeration member representing an uncategorized energy carrier.</p> <p>Methods:</p> Name Description <code>_missing_</code> <p>A method to handle missing values.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class EnergyCarrier(Enum):\n  \"\"\"\n  An enumeration class for energy carriers.\n\n  Attributes:\n      ELECTRICITY (Enum): An enumeration member representing electricity.\n      GAS (Enum): An enumeration member representing gas.\n      HEAT (Enum): An enumeration member representing heat.\n      COOLING (Enum): An enumeration member representing cooling.\n      UNCATEGORIZED (Enum): An enumeration member representing an uncategorized energy carrier.\n\n  Methods:\n      _missing_: A method to handle missing values.\n  \"\"\"\n\n  ELECTRICITY = auto()\n  NATURALGAS = auto()\n  HEATING = auto()\n  COOLING = auto()\n  UNCATEGORIZED = auto()\n  NONE = auto()\n\n  @classmethod\n  def _missing_(cls, value):\n    return cls.NONE\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.EnergyCharge","title":"<code>EnergyCharge</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for energy charges.</p> <p>Attributes:</p> Name Type Description <code>DUOS</code> <code>Enum</code> <p>An enumeration member representing the distribution use of system charge.</p> <code>CCL</code> <code>Enum</code> <p>An enumeration member representing the climate change levy charge.</p> <code>ENERGY_CHARGE</code> <code>Enum</code> <p>An enumeration member representing the energy charge.</p> <code>NIGHT_CHARGE</code> <code>Enum</code> <p>An enumeration member representing the night charge.</p> <code>DAY_CHARGE</code> <code>Enum</code> <p>An enumeration member representing the day charge.</p> <code>DUOS_AMBER</code> <code>Enum</code> <p>An enumeration member representing the distribution use of system charge for amber periods.</p> <code>DUOS_RED</code> <code>Enum</code> <p>An enumeration member representing the distribution use of system charge for red periods.</p> <code>DUOS_GREEN</code> <code>Enum</code> <p>An enumeration member representing the distribution use of system charge for green periods.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class EnergyCharge(Enum):\n  \"\"\"\n  An enumeration class for energy charges.\n\n  Attributes:\n    DUOS (Enum): An enumeration member representing the distribution use of system charge.\n    CCL (Enum): An enumeration member representing the climate change levy charge.\n    ENERGY_CHARGE (Enum): An enumeration member representing the energy charge.\n    NIGHT_CHARGE (Enum): An enumeration member representing the night charge.\n    DAY_CHARGE (Enum): An enumeration member representing the day charge.\n    DUOS_AMBER (Enum): An enumeration member representing the distribution use of system charge for amber periods.\n    DUOS_RED (Enum): An enumeration member representing the distribution use of system charge for red periods.\n    DUOS_GREEN (Enum): An enumeration member representing the distribution use of system charge for green periods.\n  \"\"\"\n  DUOS = auto()\n  CCL = auto()\n  ENERGY_CHARGE = auto()\n  NIGHT_CHARGE = auto()\n  DAY_CHARGE = auto()\n  DUOS_AMBER = auto()\n  DUOS_RED = auto()\n  DUOS_GREEN = auto()\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.PhysicalQuantity","title":"<code>PhysicalQuantity</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for physical quantities.</p> <p>Attributes:</p> Name Type Description <code>TEMPERATURE</code> <code>Enum</code> <p>An enumeration member representing the temperature.</p> <code>ENERGY</code> <code>Enum</code> <p>An enumeration member representing the energy.</p> <code>TIME</code> <code>Enum</code> <p>An enumeration member representing the time.</p> <code>MASS</code> <code>Enum</code> <p>An enumeration member representing the mass.</p> <code>LENGTH</code> <code>Enum</code> <p>An enumeration member representing the length.</p> <code>POWER</code> <code>Enum</code> <p>An enumeration member representing the power.</p> <code>UNCATEGORIZED</code> <code>Enum</code> <p>An enumeration member representing an uncategorized quantity.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class PhysicalQuantity(Enum):\n  \"\"\"\n  An enumeration class for physical quantities.\n\n  Attributes:\n      TEMPERATURE (Enum): An enumeration member representing the temperature.\n      ENERGY (Enum): An enumeration member representing the energy.\n      TIME (Enum): An enumeration member representing the time.\n      MASS (Enum): An enumeration member representing the mass.\n      LENGTH (Enum): An enumeration member representing the length.\n      POWER (Enum): An enumeration member representing the power.\n      UNCATEGORIZED (Enum): An enumeration member representing an uncategorized quantity.\n  \"\"\"\n  TEMPERATURE = auto()\n  ENERGY = auto()\n  TIME = auto()\n  MASS = auto()\n  LENGTH = auto()\n  POWER = auto()\n  UNCATEGORIZED = auto()\n\n  @classmethod\n  def _missing_(cls, value):\n    return cls.UNCATEGORIZED\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.Season","title":"<code>Season</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for seasons.</p> <p>Attributes:</p> Name Type Description <code>WINTER</code> <code>Enum</code> <p>An enumeration member representing the winter season.</p> <code>SUMMER</code> <code>Enum</code> <p>An enumeration member representing the summer season.</p> <code>SPRING</code> <code>Enum</code> <p>An enumeration member representing the spring season.</p> <code>AUTUMN</code> <code>Enum</code> <p>An enumeration member representing the autumn season.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class Season(Enum):\n  \"\"\"\n  An enumeration class for seasons.\n\n  Attributes:\n    WINTER (Enum): An enumeration member representing the winter season.\n    SUMMER (Enum): An enumeration member representing the summer season.\n    SPRING (Enum): An enumeration member representing the spring season.\n    AUTUMN (Enum): An enumeration member representing the autumn season.\n  \"\"\"\n  WINTER = auto()\n  SUMMER = auto()\n  SPRING = auto()\n  AUTUMN = auto()\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.SimParameters","title":"<code>SimParameters</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for simulation parameters.</p> <p>Attributes:</p> Name Type Description <code>COST</code> <code>Enum</code> <p>An enumeration member representing the cost.</p> <code>TIMESTEP</code> <code>Enum</code> <p>An enumeration member representing the timestep.</p> <code>SIMULATION_UNIT</code> <code>Enum</code> <p>An enumeration member representing the simulation unit.</p> <code>PRICE_UNIT</code> <code>Enum</code> <p>An enumeration member representing the price unit.</p> <code>EMISSION_UNIT</code> <code>Enum</code> <p>An enumeration member representing the emission unit.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class SimParameters(Enum):\n  \"\"\"\n  An enumeration class for simulation parameters.\n\n  Attributes:\n      COST (Enum): An enumeration member representing the cost.\n      TIMESTEP (Enum): An enumeration member representing the timestep.\n      SIMULATION_UNIT (Enum): An enumeration member representing the simulation unit.\n      PRICE_UNIT (Enum): An enumeration member representing the price unit.\n      EMISSION_UNIT (Enum): An enumeration member representing the emission unit.\n  \"\"\"\n  COST = 1, \"GBP\"\n  TIMESTEP = 30, \"minutes\"\n  SIMULATION_UNIT = 1, \"kW\"\n  PRICE_UNIT = 1, \"GBP/kWh\"\n  EMISSION_UNIT = 1, \"kgCO2e/kWh\"\n\n  @property\n  def magnitude(self) -&gt; str:\n    \"\"\"Get the magnitude which is most commonly used for this unit.\"\"\"\n    return str(self.value[0])\n\n  @property\n  def units(self) -&gt; str:\n    \"\"\"Get the units for which this unit is relevant.\"\"\"\n    return self.value[1]\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.SimParameters.magnitude","title":"<code>magnitude: str</code>  <code>property</code>","text":"<p>Get the magnitude which is most commonly used for this unit.</p>"},{"location":"reference/structures/enums/#structures.enums.SimParameters.units","title":"<code>units: str</code>  <code>property</code>","text":"<p>Get the units for which this unit is relevant.</p>"},{"location":"reference/structures/enums/#structures.enums.SiteData","title":"<code>SiteData</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for site data.</p> <p>Attributes:</p> Name Type Description <code>TIMESTEP</code> <code>Enum</code> <p>An enumeration member representing the timestep.</p> <code>ENERGY_INPUT</code> <code>Enum</code> <p>An enumeration member representing the energy input.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class SiteData(Enum):\n  \"\"\"\n  An enumeration class for site data.\n\n  Attributes:\n      TIMESTEP (Enum): An enumeration member representing the timestep.\n      ENERGY_INPUT (Enum): An enumeration member representing the energy input.\n  \"\"\"\n\n  @staticmethod\n  def _generate_next_value_(name: str, start: int, count: int, last_values):\n    return count\n\n  TIMESTEP = auto()\n  ENERGY_INPUT = auto()\n</code></pre>"},{"location":"reference/structures/enums/#structures.enums.TechnologyType","title":"<code>TechnologyType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>An enumeration class for technology types.</p> <p>Attributes:</p> Name Type Description <code>PV</code> <code>Enum</code> <p>An enumeration member representing photovoltaic technology.</p> <code>WIND</code> <code>Enum</code> <p>An enumeration member representing wind technology.</p> <code>BATTERY</code> <code>Enum</code> <p>An enumeration member representing battery technology.</p> <code>CHP</code> <code>Enum</code> <p>An enumeration member representing combined heat and power technology.</p> <code>BOILER</code> <code>Enum</code> <p>An enumeration member representing boiler technology.</p> <code>HEATPUMP</code> <code>Enum</code> <p>An enumeration member representing heat pump technology.</p> <code>UNCATEGORIZED</code> <code>Enum</code> <p>An enumeration member representing an uncategorized technology type.</p> Source code in <code>e2slib/structures/enums.py</code> <pre><code>class TechnologyType(Enum):\n  \"\"\"\n  An enumeration class for technology types.\n\n  Attributes:\n      PV (Enum): An enumeration member representing photovoltaic technology.\n      WIND (Enum): An enumeration member representing wind technology.\n      BATTERY (Enum): An enumeration member representing battery technology.\n      CHP (Enum): An enumeration member representing combined heat and power technology.\n      BOILER (Enum): An enumeration member representing boiler technology.\n      HEATPUMP (Enum): An enumeration member representing heat pump technology.\n      UNCATEGORIZED (Enum): An enumeration member representing an uncategorized technology type.\n  \"\"\"\n\n  PV = \"Photovoltaics panels\"\n  EV = \"Electric vehicle chargers\"\n  WINDTURBINE = \"Wind turbine\"\n  CHPPLANT = \"Combined heat and power plant\"\n  BOILERPLANT = \"Boiler\"\n  UNCATEGORIZED = \"Uncategorized\"\n  HEATPUMP = \"Heat-pump\"\n  GRID = \"Main grid\"\n  SITE = \"Site\"\n</code></pre>"},{"location":"reference/structures/protocols/","title":"Protocols","text":""},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator","title":"<code>AssetAggregator</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>A class used to represent an asset aggregator.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the asset aggregator.</p> <p>Methods:</p> Name Description <code>size_system</code> <p>Get the size of the system for each technology type.</p> <code>capital_cost</code> <p>Get the capital cost for each technology type.</p> <code>annual_maintenance_cost</code> <p>Get the annual maintenance cost for each technology type.</p> <code>lifetime</code> <p>Get the lifetime of the asset aggregator.</p> <code>additional_demand</code> <p>Get the additional demand as a DataFrame.</p> <code>onsite_generation</code> <p>Get the onsite generation as a DataFrame.</p> <code>export_results</code> <p>Export the results as a DataFrame.</p> Source code in <code>e2slib/structures/protocols.py</code> <pre><code>@dataclass\nclass AssetAggregator(Protocol):\n  \"\"\"\n  A class used to represent an asset aggregator.\n\n  Attributes:\n      name (str): The name of the asset aggregator.\n\n  Methods:\n      size_system() -&gt; dict[enums.TechnologyType, float]:\n          Get the size of the system for each technology type.\n      capital_cost() -&gt; dict[enums.TechnologyType, float]:\n          Get the capital cost for each technology type.\n      annual_maintenance_cost() -&gt; dict[enums.TechnologyType, float]:\n          Get the annual maintenance cost for each technology type.\n      lifetime() -&gt; int:\n          Get the lifetime of the asset aggregator.\n      additional_demand() -&gt; pd.DataFrame:\n          Get the additional demand as a DataFrame.\n      onsite_generation() -&gt; pd.DataFrame:\n          Get the onsite generation as a DataFrame.\n      export_results() -&gt; pd.DataFrame:\n          Export the results as a DataFrame.\n  \"\"\"\n\n  name: str\n\n  @property\n  def size_system(self) -&gt; dict[enums.TechnologyType, float]:\n    \"\"\"\n    Get the size of the system for each technology type.\n\n    Returns:\n        dict[enums.TechnologyType, float]: The size of the system for each technology type.\n    \"\"\"\n    ...\n\n  @property\n  def capital_cost(self) -&gt; dict[enums.TechnologyType, float]:\n    \"\"\"\n    Get the capital cost for each technology type.\n\n    Returns:\n        dict[enums.TechnologyType, float]: The capital cost for each technology type.\n    \"\"\"\n    ...\n\n  @property\n  def annual_maintenance_cost(self) -&gt; dict[enums.TechnologyType, float]:\n    \"\"\"\n    Get the annual maintenance cost for each technology type.\n\n    Returns:\n        dict[enums.TechnologyType, float]: The annual maintenance cost for each technology type.\n    \"\"\"\n    ...\n\n  @property\n  def lifetime(self) -&gt; int:\n    \"\"\"\n    Get the lifetime of the asset aggregator.\n\n    Returns:\n        int: The lifetime of the asset aggregator.\n    \"\"\"\n    ...\n\n  @property\n  def additional_demand(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the additional demand as a DataFrame.\n\n    Returns:\n        pd.DataFrame: The additional demand as a DataFrame.\n    \"\"\"\n    ...\n\n  @property\n  def onsite_generation(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the onsite generation as a DataFrame.\n\n    Returns:\n        pd.DataFrame: The onsite generation as a DataFrame.\n    \"\"\"\n    ...\n\n  def export_results(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Export the results as a DataFrame.\n\n    Returns:\n        pd.DataFrame: The results as a DataFrame.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator.additional_demand","title":"<code>additional_demand: pd.DataFrame</code>  <code>property</code>","text":"<p>Get the additional demand as a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The additional demand as a DataFrame.</p>"},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator.annual_maintenance_cost","title":"<code>annual_maintenance_cost: dict[enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Get the annual maintenance cost for each technology type.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[enums.TechnologyType, float]: The annual maintenance cost for each technology type.</p>"},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator.capital_cost","title":"<code>capital_cost: dict[enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Get the capital cost for each technology type.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[enums.TechnologyType, float]: The capital cost for each technology type.</p>"},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator.lifetime","title":"<code>lifetime: int</code>  <code>property</code>","text":"<p>Get the lifetime of the asset aggregator.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The lifetime of the asset aggregator.</p>"},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator.onsite_generation","title":"<code>onsite_generation: pd.DataFrame</code>  <code>property</code>","text":"<p>Get the onsite generation as a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The onsite generation as a DataFrame.</p>"},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator.size_system","title":"<code>size_system: dict[enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Get the size of the system for each technology type.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[enums.TechnologyType, float]: The size of the system for each technology type.</p>"},{"location":"reference/structures/protocols/#structures.protocols.AssetAggregator.export_results","title":"<code>export_results()</code>","text":"<p>Export the results as a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The results as a DataFrame.</p> Source code in <code>e2slib/structures/protocols.py</code> <pre><code>def export_results(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Export the results as a DataFrame.\n\n  Returns:\n      pd.DataFrame: The results as a DataFrame.\n  \"\"\"\n  ...\n</code></pre>"},{"location":"reference/structures/protocols/#structures.protocols.SiteModel","title":"<code>SiteModel</code>  <code>dataclass</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>A class used to represent a site model.</p> <p>Methods:</p> Name Description <code>size_sysem</code> <p>Get the size of the system for each technology type.</p> <code>capital_cost</code> <p>Get the capital cost for each technology type.</p> <code>annual_maintenance_cost</code> <p>Get the annual maintenance cost for each technology type.</p> <code>export_results</code> <p>Export the results as a DataFrame.</p> <code>timezone</code> <p>Get the timezone of the site model.</p> <code>add_asset_aggregator</code> <p>AssetAggregator) -&gt; None: Add an asset aggregator to the site model.</p> Source code in <code>e2slib/structures/protocols.py</code> <pre><code>@dataclass\nclass SiteModel(Protocol):\n  \"\"\"\n  A class used to represent a site model.\n\n  Methods:\n      size_sysem() -&gt; dict[enums.TechnologyType, float]:\n          Get the size of the system for each technology type.\n      capital_cost() -&gt; dict[enums.TechnologyType, float]:\n          Get the capital cost for each technology type.\n      annual_maintenance_cost() -&gt; dict[enums.TechnologyType, float]:\n          Get the annual maintenance cost for each technology type.\n      export_results() -&gt; pd.DataFrame:\n          Export the results as a DataFrame.\n      timezone() -&gt; str:\n          Get the timezone of the site model.\n      add_asset_aggregator(asset_aggregator: AssetAggregator) -&gt; None:\n          Add an asset aggregator to the site model.\n  \"\"\"\n\n  @property\n  def size_sysem(self) -&gt; dict[enums.TechnologyType, float]:\n    \"\"\"\n    Get the size of the system for each technology type.\n\n    Returns:\n        dict[enums.TechnologyType, float]: The size of the system for each technology type.\n    \"\"\"\n    ...\n\n  @property\n  def capital_cost(self) -&gt; dict[enums.TechnologyType, float]:\n    \"\"\"\n    Get the capital cost for each technology type.\n\n    Returns:\n        dict[enums.TechnologyType, float]: The capital cost for each technology type.\n    \"\"\"\n    ...\n\n  @property\n  def annual_maintenance_cost(self) -&gt; dict[enums.TechnologyType, float]:\n    \"\"\"\n    Get the annual maintenance cost for each technology type.\n\n    Returns:\n        dict[enums.TechnologyType, float]: The annual maintenance cost for each technology type.\n    \"\"\"\n    ...\n\n  def export_results(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Export the results as a DataFrame.\n\n    Returns:\n        pd.DataFrame: The results as a DataFrame.\n    \"\"\"\n    ...\n\n  @property\n  def timezone(self) -&gt; str:\n    \"\"\"\n    Get the timezone of the site model.\n\n    Returns:\n        str: The timezone of the site model.\n    \"\"\"\n    ...\n\n  def add_asset_aggregator(self, asset_aggregator: AssetAggregator) -&gt; None:\n    \"\"\"\n    Add an asset aggregator to the site model.\n\n    Args:\n        asset_aggregator (AssetAggregator): The asset aggregator to add.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/structures/protocols/#structures.protocols.SiteModel.annual_maintenance_cost","title":"<code>annual_maintenance_cost: dict[enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Get the annual maintenance cost for each technology type.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[enums.TechnologyType, float]: The annual maintenance cost for each technology type.</p>"},{"location":"reference/structures/protocols/#structures.protocols.SiteModel.capital_cost","title":"<code>capital_cost: dict[enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Get the capital cost for each technology type.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[enums.TechnologyType, float]: The capital cost for each technology type.</p>"},{"location":"reference/structures/protocols/#structures.protocols.SiteModel.size_sysem","title":"<code>size_sysem: dict[enums.TechnologyType, float]</code>  <code>property</code>","text":"<p>Get the size of the system for each technology type.</p> <p>Returns:</p> Type Description <code>dict[TechnologyType, float]</code> <p>dict[enums.TechnologyType, float]: The size of the system for each technology type.</p>"},{"location":"reference/structures/protocols/#structures.protocols.SiteModel.timezone","title":"<code>timezone: str</code>  <code>property</code>","text":"<p>Get the timezone of the site model.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The timezone of the site model.</p>"},{"location":"reference/structures/protocols/#structures.protocols.SiteModel.add_asset_aggregator","title":"<code>add_asset_aggregator(asset_aggregator)</code>","text":"<p>Add an asset aggregator to the site model.</p> <p>Parameters:</p> Name Type Description Default <code>asset_aggregator</code> <code>AssetAggregator</code> <p>The asset aggregator to add.</p> required Source code in <code>e2slib/structures/protocols.py</code> <pre><code>def add_asset_aggregator(self, asset_aggregator: AssetAggregator) -&gt; None:\n  \"\"\"\n  Add an asset aggregator to the site model.\n\n  Args:\n      asset_aggregator (AssetAggregator): The asset aggregator to add.\n  \"\"\"\n  ...\n</code></pre>"},{"location":"reference/structures/protocols/#structures.protocols.SiteModel.export_results","title":"<code>export_results()</code>","text":"<p>Export the results as a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The results as a DataFrame.</p> Source code in <code>e2slib/structures/protocols.py</code> <pre><code>def export_results(self) -&gt; pd.DataFrame:\n  \"\"\"\n  Export the results as a DataFrame.\n\n  Returns:\n      pd.DataFrame: The results as a DataFrame.\n  \"\"\"\n  ...\n</code></pre>"},{"location":"reference/structures/site_schema/","title":"Site schema","text":""},{"location":"reference/structures/viz_schema/","title":"Viz schema","text":""},{"location":"reference/utillib/","title":"Index","text":""},{"location":"reference/utillib/dummy_data/","title":"Dummy data","text":""},{"location":"reference/utillib/dummy_data/#utillib.dummy_data.create_dummy_site_demand","title":"<code>create_dummy_site_demand(year)</code>","text":"<p>Create a dummy site demand DataFrame for a year.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year for which to generate the site demand.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The generated site demand DataFrame.</p> Source code in <code>e2slib/utillib/dummy_data.py</code> <pre><code>def create_dummy_site_demand(year: int) -&gt; pd.DataFrame:\n  \"\"\"\n  Create a dummy site demand DataFrame for a year.\n\n  Args:\n      year (int): The year for which to generate the site demand.\n\n  Returns:\n      pd.DataFrame: The generated site demand DataFrame.\n  \"\"\"\n  timesteps = generate_annual_timesteps(year=year)\n  dummy_site_demand = pd.DataFrame(index=timesteps)\n  dummy_site_demand['Site energy [kWh]'] = dummy_site_demand.index.to_series(\n  ).apply(generate_dummy_demand_values)\n  return dummy_site_demand\n</code></pre>"},{"location":"reference/utillib/dummy_data/#utillib.dummy_data.dummy_duos_timetable","title":"<code>dummy_duos_timetable(red, amber, green, day, night)</code>","text":"<p>Generate a dummy DUoS timetable.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>float</code> <p>The red charge.</p> required <code>amber</code> <code>float</code> <p>The amber charge.</p> required <code>green</code> <code>float</code> <p>The green charge.</p> required <code>day</code> <code>float</code> <p>The day charge.</p> required <code>night</code> <code>float</code> <p>The night charge.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>The generated DUoS timetable.</p> Source code in <code>e2slib/utillib/dummy_data.py</code> <pre><code>def dummy_duos_timetable(red: float, amber: float, green: float, day: float,\n                         night: float) -&gt; list:\n  \"\"\"\n  Generate a dummy DUoS timetable.\n\n  Args:\n      red (float): The red charge.\n      amber (float): The amber charge.\n      green (float): The green charge.\n      day (float): The day charge.\n      night (float): The night charge.\n\n  Returns:\n      list: The generated DUoS timetable.\n  \"\"\"\n  return [(time(16, 0), time(20, 0), red + day),\n          (time(6, 0), time(16, 0), amber + day),\n          (time(0, 0), time(6, 0), green + night),\n          (time(20, 0), time(23, 59, 59), green + day)]\n</code></pre>"},{"location":"reference/utillib/dummy_data/#utillib.dummy_data.dummy_duos_values","title":"<code>dummy_duos_values(red=0.0518, amber=0.00518, green=0.00051, day=0.195, night=0.143)</code>","text":"<p>Generate dummy DUoS values.</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>float</code> <p>The red charge.</p> <code>0.0518</code> <code>amber</code> <code>float</code> <p>The amber charge.</p> <code>0.00518</code> <code>green</code> <code>float</code> <p>The green charge.</p> <code>0.00051</code> <code>day</code> <code>float</code> <p>The day charge.</p> <code>0.195</code> <code>night</code> <code>float</code> <p>The night charge.</p> <code>0.143</code> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>The generated DUoS values.</p> Source code in <code>e2slib/utillib/dummy_data.py</code> <pre><code>def dummy_duos_values(red: float = 0.0518,\n                      amber: float = 0.00518,\n                      green: float = 0.00051,\n                      day: float = 0.1950,\n                      night: float = 0.1430) -&gt; list:\n  \"\"\"\n  Generate dummy DUoS values.\n\n  Args:\n      red (float): The red charge.\n      amber (float): The amber charge.\n      green (float): The green charge.\n      day (float): The day charge.\n      night (float): The night charge.\n\n  Returns:\n      list: The generated DUoS values.\n  \"\"\"\n  return dummy_duos_timetable(red, amber, green, day, night)\n</code></pre>"},{"location":"reference/utillib/dummy_data/#utillib.dummy_data.generate_annual_timesteps","title":"<code>generate_annual_timesteps(year)</code>","text":"<p>Generate a DatetimeIndex for a year with a 30 minute frequency.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year for which to generate the DatetimeIndex.</p> required <p>Returns:</p> Type Description <code>DatetimeIndex</code> <p>pd.DatetimeIndex: The generated DatetimeIndex.</p> Source code in <code>e2slib/utillib/dummy_data.py</code> <pre><code>def generate_annual_timesteps(year: int) -&gt; pd.DatetimeIndex:\n  \"\"\"\n  Generate a DatetimeIndex for a year with a 30 minute frequency.\n\n  Args:\n      year (int): The year for which to generate the DatetimeIndex.\n\n  Returns:\n      pd.DatetimeIndex: The generated DatetimeIndex.\n  \"\"\"\n  return pd.date_range(datetime(year, 1, 1, 0, 0, tzinfo=pytz.UTC),\n                       datetime(year, 12, 31, 23, 59, 59, tzinfo=pytz.UTC),\n                       freq=\"30min\",\n                       tz=\"UTC\")\n</code></pre>"},{"location":"reference/utillib/dummy_data/#utillib.dummy_data.generate_dummy_carbon_profile","title":"<code>generate_dummy_carbon_profile(year)</code>","text":"<p>Generate a dummy carbon profile for a year.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year for which to generate the carbon profile.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The generated carbon profile DataFrame.</p> Source code in <code>e2slib/utillib/dummy_data.py</code> <pre><code>def generate_dummy_carbon_profile(year: int) -&gt; pd.DataFrame:\n  \"\"\"\n  Generate a dummy carbon profile for a year.\n\n  Args:\n      year (int): The year for which to generate the carbon profile.\n\n  Returns:\n      pd.DataFrame: The generated carbon profile DataFrame.\n  \"\"\"\n  dummy_carbon = pd.DataFrame(index=generate_annual_timesteps(year=year))\n  # Set parameters\n  length = len(dummy_carbon)\n  amplitude = 20\n  mean_value = 180\n  randomness = 1\n  wavelength = 36\n\n  times = np.arange(length)\n  random_noise = np.random.uniform(-randomness, randomness, length)\n  sin_variable = 2 * np.pi * times / wavelength\n  dummy_carbon['actual'] = amplitude * np.sin(sin_variable) + (\n      mean_value + dummy_carbon.index.hour) + random_noise\n  return dummy_carbon\n</code></pre>"},{"location":"reference/utillib/dummy_data/#utillib.dummy_data.generate_dummy_demand_values","title":"<code>generate_dummy_demand_values(timestamp)</code>","text":"<p>Generate dummy demand values for a timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>Timestamp</code> <p>The timestamp for which to generate the demand value.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The generated demand value.</p> Source code in <code>e2slib/utillib/dummy_data.py</code> <pre><code>def generate_dummy_demand_values(timestamp) -&gt; int:\n  \"\"\"\n  Generate dummy demand values for a timestamp.\n\n  Args:\n      timestamp (pd.Timestamp): The timestamp for which to generate the demand value.\n\n  Returns:\n      int: The generated demand value.\n  \"\"\"\n  if time(7, 0) &lt;= timestamp.time() &lt;= time(18,\n                                            0) and timestamp.dayofweek &lt;= 4:\n    return random.randint(10, 40)\n  else:\n    return random.randint(0, 10)\n</code></pre>"},{"location":"reference/utillib/dummy_data/#utillib.dummy_data.generate_dummy_price_profile","title":"<code>generate_dummy_price_profile(year)</code>","text":"<p>Generate a dummy price profile for a year.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year for which to generate the price profile.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The generated price profile DataFrame.</p> Source code in <code>e2slib/utillib/dummy_data.py</code> <pre><code>def generate_dummy_price_profile(year: int) -&gt; pd.DataFrame:\n  \"\"\"\n  Generate a dummy price profile for a year.\n\n  Args:\n      year (int): The year for which to generate the price profile.\n\n  Returns:\n      pd.DataFrame: The generated price profile DataFrame.\n  \"\"\"\n  timesteps = generate_annual_timesteps(year)\n  column = pd.MultiIndex.from_tuples(\n      [site_schema.ResultsSchema.IMPORT_ELECTRICITY_PRICES])\n  dummy_prices = pd.DataFrame(index=timesteps, columns=column)\n  for timestamp in timesteps:\n    time_of_day = timestamp.time()\n    for start_time, end_time, charge in dummy_duos_values():\n      if start_time &lt;= time_of_day &lt;= end_time:\n        dummy_prices.loc[timestamp, column] = charge\n        break\n  return dummy_prices\n</code></pre>"},{"location":"reference/utillib/functions/","title":"Functions","text":""},{"location":"reference/utillib/functions/#utillib.functions.add_time_features","title":"<code>add_time_features(dataf)</code>","text":"<p>Add time features to a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The DataFrame to which to add the time features.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The DataFrame with added time features.</p> Source code in <code>e2slib/utillib/functions.py</code> <pre><code>def add_time_features(dataf: pd.DataFrame) -&gt; pd.DataFrame:\n  \"\"\"\n  Add time features to a DataFrame.\n\n  Args:\n      dataf (pd.DataFrame): The DataFrame to which to add the time features.\n\n  Returns:\n      pd.DataFrame: The DataFrame with added time features.\n  \"\"\"\n  new_dataf = dataf.copy()\n  new_dataf_index: pd.DatetimeIndex = new_dataf.index\n  new_dataf[datetime_schema.DateTimeSchema.HOUR] = new_dataf_index.hour\n  new_dataf[\n      datetime_schema.DateTimeSchema.DAYOFWEEK] = new_dataf_index.dayofweek\n  new_dataf[\n      datetime_schema.DateTimeSchema.DAYOFYEAR] = new_dataf_index.dayofyear\n  new_dataf[datetime_schema.DateTimeSchema.MONTH] = new_dataf_index.month\n  new_dataf[datetime_schema.DateTimeSchema.YEAR] = new_dataf_index.year\n  new_dataf[datetime_schema.DateTimeSchema.WEEKDAYFLAG] = [\n      'weekday' if x &lt; 5 else 'weekend' for x in new_dataf_index.dayofweek\n  ]\n  new_dataf[datetime_schema.DateTimeSchema.\n            HALFHOUR] = new_dataf_index.hour * 2 + new_dataf_index.minute // 30\n  new_dataf[datetime_schema.DateTimeSchema.HALFHOUR] = new_dataf[\n      datetime_schema.DateTimeSchema.HALFHOUR].astype(int)\n  new_dataf[datetime_schema.DateTimeSchema.DATE] = new_dataf_index.date\n  new_dataf[\n      datetime_schema.DateTimeSchema.WEEK] = new_dataf_index.isocalendar().week\n  new_dataf[datetime_schema.DateTimeSchema.SEASON] = new_dataf[\n      datetime_schema.DateTimeSchema.MONTH].map(get_season)\n\n  season_dict = {\n      enums.Season.WINTER.name: 1,\n      enums.Season.SPRING.name: 2,\n      enums.Season.SUMMER.name: 3,\n      enums.Season.AUTUMN.name: 4\n  }\n  new_dataf[datetime_schema.DateTimeSchema.SEASON_NUM] = new_dataf[\n      datetime_schema.DateTimeSchema.SEASON].map(lambda x: season_dict[x])\n\n  return new_dataf\n</code></pre>"},{"location":"reference/utillib/functions/#utillib.functions.fill_missing_data","title":"<code>fill_missing_data(dataf)</code>","text":"<p>Fill a dataframe using linear interpolation.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The DataFrame to process.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The DataFrame with missing data filled.</p> Source code in <code>e2slib/utillib/functions.py</code> <pre><code>def fill_missing_data(dataf: pd.DataFrame) -&gt; pd.DataFrame:\n  \"\"\"\n  Fill a dataframe using linear interpolation.\n\n  Args:\n      dataf (pd.DataFrame): The DataFrame to process.\n\n  Returns:\n      pd.DataFrame: The DataFrame with missing data filled.\n  \"\"\"\n  return dataf.fillna(dataf.interpolate())\n</code></pre>"},{"location":"reference/utillib/functions/#utillib.functions.format_avg_week_index","title":"<code>format_avg_week_index(dataf, timestep)</code>","text":"<p>Format the index of an average week DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The DataFrame to process.</p> required <code>timestep</code> <code>TimeStep</code> <p>The timestep of the data.</p> required <p>Returns:</p> Type Description <code>Index</code> <p>pd.Index: The formatted index of the DataFrame.</p> Source code in <code>e2slib/utillib/functions.py</code> <pre><code>def format_avg_week_index(\n    dataf: pd.DataFrame, timestep: datetime_schema.DateTimeSchema) -&gt; pd.Index:\n  \"\"\"\n  Format the index of an average week DataFrame.\n\n  Args:\n      dataf (pd.DataFrame): The DataFrame to process.\n      timestep (enums.TimeStep): The timestep of the data.\n\n  Returns:\n      pd.Index: The formatted index of the DataFrame.\n  \"\"\"\n  if timestep is datetime_schema.DateTimeSchema.HALFHOUR:\n    return dataf.index.get_level_values(0) + (\n        (1 / 48) * dataf.index.get_level_values(1))\n  else:\n    return dataf.index.get_level_values(0) + (\n        (1 / 24) * dataf.index.get_level_values(1))\n</code></pre>"},{"location":"reference/utillib/functions/#utillib.functions.get_avg_week_by_season_df","title":"<code>get_avg_week_by_season_df(dataf, target_col, timestep=datetime_schema.DateTimeSchema.HOUR, func=np.mean)</code>","text":"<p>Get the average demand for each season and day of the week.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The DataFrame to process.</p> required <code>target_col</code> <code>str</code> <p>The column to aggregate.</p> required <code>timestep</code> <code>TimeStep</code> <p>The timestep of the data, by default enums.TimeStep.HALFHOUR</p> <code>HOUR</code> <code>func</code> <code>function</code> <p>The aggregation function, by default np.mean</p> <code>mean</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The DataFrame with the average demand for each season and day of the week.</p> Source code in <code>e2slib/utillib/functions.py</code> <pre><code>def get_avg_week_by_season_df(\n    dataf: pd.DataFrame,\n    target_col: str,\n    timestep: datetime_schema.DateTimeSchema = datetime_schema.DateTimeSchema.\n    HOUR,\n    func=np.mean) -&gt; pd.DataFrame:\n  \"\"\"\n  Get the average demand for each season and day of the week.\n\n  Args:\n      dataf (pd.DataFrame): The DataFrame to process.\n      target_col (str): The column to aggregate.\n      timestep (enums.TimeStep, optional): The timestep of the data, by default enums.TimeStep.HALFHOUR\n      func (function, optional): The aggregation function, by default np.mean\n\n  Returns:\n      pd.DataFrame: The DataFrame with the average demand for each season and day of the week.\n  \"\"\"\n  groupby_cols = [\n      datetime_schema.DateTimeSchema.SEASON,\n      datetime_schema.DateTimeSchema.DAYOFWEEK, timestep\n  ]\n  gb_dataf = dataf.groupby(groupby_cols).agg({target_col: func}).unstack(0)\n  gb_dataf.columns = [c[1] for c in gb_dataf.columns]\n  gb_dataf = gb_dataf[[c.name for c in enums.Season]]\n  return gb_dataf\n</code></pre>"},{"location":"reference/utillib/functions/#utillib.functions.get_season","title":"<code>get_season(month)</code>","text":"<p>Get the season for a given month.</p> <p>Parameters:</p> Name Type Description Default <code>month</code> <code>int</code> <p>The month for which to get the season.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The season of the given month.</p> Source code in <code>e2slib/utillib/functions.py</code> <pre><code>def get_season(month: int) -&gt; str:\n  \"\"\"\n  Get the season for a given month.\n\n  Args:\n      month (int): The month for which to get the season.\n\n  Returns:\n      str: The season of the given month.\n  \"\"\"\n  if 3 &lt;= month &lt;= 5:  #April and May\n    return enums.Season.SPRING.name\n  elif 6 &lt;= month &lt;= 8:  # June, July, August\n    return enums.Season.SUMMER.name\n  elif 9 &lt;= month &lt;= 11:  # September, October and November\n    return enums.Season.AUTUMN.name\n  else:\n    return enums.Season.WINTER.name\n</code></pre>"},{"location":"reference/utillib/functions/#utillib.functions.remove_zero_values","title":"<code>remove_zero_values(dataf)</code>","text":"<p>Replace zero values with NaN in a DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>dataf</code> <code>DataFrame</code> <p>The DataFrame to process.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The DataFrame with zero values replaced by NaN.</p> Source code in <code>e2slib/utillib/functions.py</code> <pre><code>def remove_zero_values(dataf: pd.DataFrame) -&gt; pd.DataFrame:\n  \"\"\"\n  Replace zero values with NaN in a DataFrame.\n\n  Args:\n      dataf (pd.DataFrame): The DataFrame to process.\n\n  Returns:\n      pd.DataFrame: The DataFrame with zero values replaced by NaN.\n  \"\"\"\n  filt = dataf.values == 0\n  dataf.loc[filt] = np.nan\n  return dataf\n</code></pre>"},{"location":"reference/utillib/functions/#utillib.functions.resample_and_fill_missing_data","title":"<code>resample_and_fill_missing_data(input_dataf, freq='30min')</code>","text":"<p>Resample a DataFrame and fill missing data.</p> <p>Parameters:</p> Name Type Description Default <code>input_dataf</code> <code>DataFrame</code> <p>The DataFrame to process.</p> required <code>freq</code> <code>str</code> <p>The frequency to resample to, by default '30min'</p> <code>'30min'</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The resampled DataFrame with missing data filled.</p> Source code in <code>e2slib/utillib/functions.py</code> <pre><code>def resample_and_fill_missing_data(input_dataf: pd.DataFrame,\n                                   freq: str = '30min') -&gt; pd.DataFrame:\n  \"\"\"\n  Resample a DataFrame and fill missing data.\n\n  Args:\n      input_dataf (pd.DataFrame): The DataFrame to process.\n      freq (str, optional): The frequency to resample to, by default '30min'\n\n  Returns:\n      pd.DataFrame: The resampled DataFrame with missing data filled.\n  \"\"\"\n  dataf = input_dataf.copy()\n  dataf = dataf.resample(freq).mean()\n  return fill_missing_data(dataf)\n</code></pre>"}]}